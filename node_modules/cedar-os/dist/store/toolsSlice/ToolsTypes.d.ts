import { z } from 'zod';

type ToolFunction<TArgs> = (args: TArgs) => void | Promise<void>;
interface RegisteredToolBase<TArgs> {
    name: string;
    execute: (args: TArgs) => void | Promise<void>;
    argsSchema: z.ZodSchema<TArgs>;
    description?: string;
}
interface RegisteredTool<TArgs> {
    execute: ToolFunction<TArgs>;
    argsSchema: z.ZodSchema<TArgs>;
    description?: string;
}
type ToolsMap = Map<string, RegisteredToolBase<unknown>>;
interface ToolRegistrationConfig<TArgs> {
    name: string;
    execute: ToolFunction<TArgs>;
    argsSchema: z.ZodSchema<TArgs>;
    description?: string;
}
interface ToolsState {
    registeredTools: ToolsMap;
}
interface ToolsActions {
    registerTool: <TArgs>(config: ToolRegistrationConfig<TArgs>) => void;
    unregisterTool: (name: string) => void;
    executeTool: <TArgs>(name: string, args: TArgs) => Promise<void>;
    getRegisteredTools: () => ToolsMap;
    clearTools: () => void;
}
type ToolsSlice = ToolsState & ToolsActions;

export type { RegisteredTool, RegisteredToolBase, ToolFunction, ToolRegistrationConfig, ToolsActions, ToolsMap, ToolsSlice, ToolsState };
