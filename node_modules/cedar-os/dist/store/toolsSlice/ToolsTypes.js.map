{"version":3,"sources":["../../../src/store/toolsSlice/ToolsTypes.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Type for a frontend tool function\nexport type ToolFunction<TArgs> = (args: TArgs) => void | Promise<void>;\n\n// Base interface for registered tools - type-erased for storage\nexport interface RegisteredToolBase<TArgs> {\n\tname: string;\n\t// The actual function to execute - accepts unknown args for runtime flexibility\n\texecute: (args: TArgs) => void | Promise<void>;\n\t// Zod schema for validating arguments - can validate unknown type\n\targsSchema: z.ZodSchema<TArgs>;\n\t// Optional metadata\n\tdescription?: string;\n}\n\n// Structure of a registered tool - properly generic for compile-time safety\nexport interface RegisteredTool<TArgs> {\n\t// The actual function to execute\n\texecute: ToolFunction<TArgs>;\n\t// Zod schema for validating arguments\n\targsSchema: z.ZodSchema<TArgs>;\n\t// Optional metadata\n\tdescription?: string;\n}\n\n// Map of all registered tools - uses base type for storage flexibility\nexport type ToolsMap = Map<string, RegisteredToolBase<unknown>>;\n\n// Configuration for registering a tool\nexport interface ToolRegistrationConfig<TArgs> {\n\tname: string;\n\texecute: ToolFunction<TArgs>;\n\targsSchema: z.ZodSchema<TArgs>;\n\tdescription?: string;\n}\n\n// State shape for tools\nexport interface ToolsState {\n\tregisteredTools: ToolsMap;\n}\n\n// Actions for tools\nexport interface ToolsActions {\n\t// Register a new tool\n\tregisterTool: <TArgs>(config: ToolRegistrationConfig<TArgs>) => void;\n\t// Unregister a tool\n\tunregisterTool: (name: string) => void;\n\t// Execute a tool with validated arguments\n\texecuteTool: <TArgs>(name: string, args: TArgs) => Promise<void>;\n\t// Get all registered tools (for passing to agent)\n\tgetRegisteredTools: () => ToolsMap;\n\t// Clear all tools\n\tclearTools: () => void;\n}\n\n// Combined slice type\nexport type ToolsSlice = ToolsState & ToolsActions;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}