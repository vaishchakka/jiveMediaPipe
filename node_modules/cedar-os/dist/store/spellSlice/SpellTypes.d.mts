declare enum Hotkey {
    A = "a",
    B = "b",
    C = "c",
    D = "d",
    E = "e",
    F = "f",
    G = "g",
    H = "h",
    I = "i",
    J = "j",
    K = "k",
    L = "l",
    M = "m",
    N = "n",
    O = "o",
    P = "p",
    Q = "q",
    R = "r",
    S = "s",
    T = "t",
    U = "u",
    V = "v",
    W = "w",
    X = "x",
    Y = "y",
    Z = "z",
    F1 = "f1",
    F2 = "f2",
    F3 = "f3",
    F4 = "f4",
    F5 = "f5",
    F6 = "f6",
    F7 = "f7",
    F8 = "f8",
    F9 = "f9",
    F10 = "f10",
    F11 = "f11",
    F12 = "f12",
    ESCAPE = "escape",
    ENTER = "enter",
    SPACE = "space",
    TAB = "tab",
    DELETE = "delete",
    BACKSPACE = "backspace",
    ARROW_UP = "arrowup",
    ARROW_DOWN = "arrowdown",
    ARROW_LEFT = "arrowleft",
    ARROW_RIGHT = "arrowright",
    CTRL = "ctrl",
    CMD = "cmd",
    META = "meta",
    ALT = "alt",
    SHIFT = "shift"
}
declare enum MouseEvent {
    RIGHT_CLICK = "right-click",
    DOUBLE_CLICK = "double-click",
    MIDDLE_CLICK = "middle-click",
    MOUSE_SCROLL = "mouse-scroll",
    SHIFT_CLICK = "shift+click",
    CTRL_CLICK = "ctrl+click",
    CMD_CLICK = "cmd+click",
    ALT_CLICK = "alt+click"
}
declare enum SelectionEvent {
    TEXT_SELECT = "text-select"
}
declare enum ActivationMode {
    /**
     * Toggle mode: Press to activate, press again to deactivate
     * Good for persistent UI elements or modes
     */
    TOGGLE = "toggle",
    /**
     * Hold mode: Activate on keydown/mousedown, deactivate on keyup/mouseup
     * Good for temporary actions like radial menus
     */
    HOLD = "hold",
    /**
     * Trigger mode: Fire once with optional cooldown
     * Good for single actions that shouldn't be spammed
     */
    TRIGGER = "trigger"
}
type HotkeyCombo = string & {
    __brand?: 'HotkeyCombo';
};
type CommonHotkeyCombo = 'ctrl+s' | 'ctrl+c' | 'ctrl+v' | 'ctrl+x' | 'ctrl+z' | 'ctrl+shift+z' | 'cmd+s' | 'cmd+c' | 'cmd+v' | 'cmd+x' | 'cmd+z' | 'cmd+shift+z' | 'cmd+shift+p' | 'ctrl+shift+p' | 'alt+enter' | HotkeyCombo;
type ActivationEvent = Hotkey | MouseEvent | SelectionEvent | HotkeyCombo;
interface ActivationConditions {
    /**
     * Array of events that can trigger activation
     */
    events: ActivationEvent[];
    /**
     * The activation mode (defaults to TOGGLE if not specified)
     */
    mode?: ActivationMode;
    /**
     * Cooldown in milliseconds for TRIGGER mode
     * Prevents rapid re-triggering
     */
    cooldown?: number;
}
interface ActivationState {
    isActive: boolean;
    triggerData?: {
        type: 'hotkey' | 'mouse' | 'selection';
        event?: ActivationEvent;
        mousePosition?: {
            x: number;
            y: number;
        };
        selectedText?: string;
        originalEvent?: Event;
    };
}

export { type ActivationConditions, type ActivationEvent, ActivationMode, type ActivationState, type CommonHotkeyCombo, Hotkey, type HotkeyCombo, MouseEvent, SelectionEvent };
