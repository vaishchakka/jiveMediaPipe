{"version":3,"sources":["../../../src/store/spellSlice/SpellTypes.ts"],"sourcesContent":["// Hotkey definitions\nexport enum Hotkey {\n\t// Single keys\n\tA = 'a',\n\tB = 'b',\n\tC = 'c',\n\tD = 'd',\n\tE = 'e',\n\tF = 'f',\n\tG = 'g',\n\tH = 'h',\n\tI = 'i',\n\tJ = 'j',\n\tK = 'k',\n\tL = 'l',\n\tM = 'm',\n\tN = 'n',\n\tO = 'o',\n\tP = 'p',\n\tQ = 'q',\n\tR = 'r',\n\tS = 's',\n\tT = 't',\n\tU = 'u',\n\tV = 'v',\n\tW = 'w',\n\tX = 'x',\n\tY = 'y',\n\tZ = 'z',\n\n\t// Function keys\n\tF1 = 'f1',\n\tF2 = 'f2',\n\tF3 = 'f3',\n\tF4 = 'f4',\n\tF5 = 'f5',\n\tF6 = 'f6',\n\tF7 = 'f7',\n\tF8 = 'f8',\n\tF9 = 'f9',\n\tF10 = 'f10',\n\tF11 = 'f11',\n\tF12 = 'f12',\n\n\t// Special keys\n\tESCAPE = 'escape',\n\tENTER = 'enter',\n\tSPACE = 'space',\n\tTAB = 'tab',\n\tDELETE = 'delete',\n\tBACKSPACE = 'backspace',\n\n\t// Arrow keys\n\tARROW_UP = 'arrowup',\n\tARROW_DOWN = 'arrowdown',\n\tARROW_LEFT = 'arrowleft',\n\tARROW_RIGHT = 'arrowright',\n\n\t// Modifier combinations (use + to combine)\n\tCTRL = 'ctrl',\n\tCMD = 'cmd',\n\tMETA = 'meta',\n\tALT = 'alt',\n\tSHIFT = 'shift',\n}\n\nexport enum MouseEvent {\n\tRIGHT_CLICK = 'right-click',\n\tDOUBLE_CLICK = 'double-click',\n\tMIDDLE_CLICK = 'middle-click',\n\tMOUSE_SCROLL = 'mouse-scroll',\n\t// Mouse + modifier combos\n\tSHIFT_CLICK = 'shift+click',\n\tCTRL_CLICK = 'ctrl+click',\n\tCMD_CLICK = 'cmd+click',\n\tALT_CLICK = 'alt+click',\n}\n\nexport enum SelectionEvent {\n\tTEXT_SELECT = 'text-select',\n}\n\n// Activation modes\nexport enum ActivationMode {\n\t/**\n\t * Toggle mode: Press to activate, press again to deactivate\n\t * Good for persistent UI elements or modes\n\t */\n\tTOGGLE = 'toggle',\n\n\t/**\n\t * Hold mode: Activate on keydown/mousedown, deactivate on keyup/mouseup\n\t * Good for temporary actions like radial menus\n\t */\n\tHOLD = 'hold',\n\n\t/**\n\t * Trigger mode: Fire once with optional cooldown\n\t * Good for single actions that shouldn't be spammed\n\t */\n\tTRIGGER = 'trigger',\n}\n\n// Combo string type for keyboard shortcuts\n// Examples: \"ctrl+s\", \"cmd+shift+p\", \"ctrl+alt+delete\"\n// We use a branded type to provide better IntelliSense while allowing any string\nexport type HotkeyCombo = string & { __brand?: 'HotkeyCombo' };\n\n// Helper type for common hotkey combinations (for better IntelliSense)\nexport type CommonHotkeyCombo =\n\t| 'ctrl+s'\n\t| 'ctrl+c'\n\t| 'ctrl+v'\n\t| 'ctrl+x'\n\t| 'ctrl+z'\n\t| 'ctrl+shift+z'\n\t| 'cmd+s'\n\t| 'cmd+c'\n\t| 'cmd+v'\n\t| 'cmd+x'\n\t| 'cmd+z'\n\t| 'cmd+shift+z'\n\t| 'cmd+shift+p'\n\t| 'ctrl+shift+p'\n\t| 'alt+enter'\n\t| HotkeyCombo; // Allow any other string combo\n\n// Union type for all activation events\nexport type ActivationEvent =\n\t| Hotkey\n\t| MouseEvent\n\t| SelectionEvent\n\t| HotkeyCombo;\n\n// Activation conditions with mode configuration\nexport interface ActivationConditions {\n\t/**\n\t * Array of events that can trigger activation\n\t */\n\tevents: ActivationEvent[];\n\n\t/**\n\t * The activation mode (defaults to TOGGLE if not specified)\n\t */\n\tmode?: ActivationMode;\n\n\t/**\n\t * Cooldown in milliseconds for TRIGGER mode\n\t * Prevents rapid re-triggering\n\t */\n\tcooldown?: number;\n}\n\nexport interface ActivationState {\n\tisActive: boolean;\n\ttriggerData?: {\n\t\ttype: 'hotkey' | 'mouse' | 'selection';\n\t\tevent?: ActivationEvent;\n\t\tmousePosition?: { x: number; y: number };\n\t\tselectedText?: string;\n\t\toriginalEvent?: Event;\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACO,IAAK,SAAL,kBAAKA,YAAL;AAEN,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AACJ,EAAAA,QAAA,OAAI;AAGJ,EAAAA,QAAA,QAAK;AACL,EAAAA,QAAA,QAAK;AACL,EAAAA,QAAA,QAAK;AACL,EAAAA,QAAA,QAAK;AACL,EAAAA,QAAA,QAAK;AACL,EAAAA,QAAA,QAAK;AACL,EAAAA,QAAA,QAAK;AACL,EAAAA,QAAA,QAAK;AACL,EAAAA,QAAA,QAAK;AACL,EAAAA,QAAA,SAAM;AACN,EAAAA,QAAA,SAAM;AACN,EAAAA,QAAA,SAAM;AAGN,EAAAA,QAAA,YAAS;AACT,EAAAA,QAAA,WAAQ;AACR,EAAAA,QAAA,WAAQ;AACR,EAAAA,QAAA,SAAM;AACN,EAAAA,QAAA,YAAS;AACT,EAAAA,QAAA,eAAY;AAGZ,EAAAA,QAAA,cAAW;AACX,EAAAA,QAAA,gBAAa;AACb,EAAAA,QAAA,gBAAa;AACb,EAAAA,QAAA,iBAAc;AAGd,EAAAA,QAAA,UAAO;AACP,EAAAA,QAAA,SAAM;AACN,EAAAA,QAAA,UAAO;AACP,EAAAA,QAAA,SAAM;AACN,EAAAA,QAAA,WAAQ;AA9DG,SAAAA;AAAA,GAAA;AAiEL,IAAK,aAAL,kBAAKC,gBAAL;AACN,EAAAA,YAAA,iBAAc;AACd,EAAAA,YAAA,kBAAe;AACf,EAAAA,YAAA,kBAAe;AACf,EAAAA,YAAA,kBAAe;AAEf,EAAAA,YAAA,iBAAc;AACd,EAAAA,YAAA,gBAAa;AACb,EAAAA,YAAA,eAAY;AACZ,EAAAA,YAAA,eAAY;AATD,SAAAA;AAAA,GAAA;AAYL,IAAK,iBAAL,kBAAKC,oBAAL;AACN,EAAAA,gBAAA,iBAAc;AADH,SAAAA;AAAA,GAAA;AAKL,IAAK,iBAAL,kBAAKC,oBAAL;AAKN,EAAAA,gBAAA,YAAS;AAMT,EAAAA,gBAAA,UAAO;AAMP,EAAAA,gBAAA,aAAU;AAjBC,SAAAA;AAAA,GAAA;","names":["Hotkey","MouseEvent","SelectionEvent","ActivationMode"]}