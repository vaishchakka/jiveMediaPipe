import { ZodSchema } from 'zod';
import { B as BasicStateValue, S as Setter, at as DiffMode, ay as ComputeStateFunction } from '../../index-XdHpD8cC.mjs';
import 'zustand';
import '../agentContext/AgentContextTypes.mjs';
import 'react';
import '@tiptap/core';
import '../spellSlice/SpellTypes.mjs';
import 'fast-json-patch';
import '../toolsSlice/ToolsTypes.mjs';

/**
 * Hook that registers and returns a diff-tracked state from the Cedar store,
 * working like React's useState but with automatic diff tracking and history.
 *
 * This is a simpler alternative to useRegisterDiffState that provides a
 * useState-like API while handling all diff tracking internally.
 *
 * @param key Unique key for the state in the store.
 * @param initialValue Initial value for the state.
 * @param options Optional configuration for the diff state.
 * @returns [state, setState] tuple where state is the computed state with diffs applied.
 *
 * @example
 * ```typescript
 * // Simple usage - just like useState but with diff tracking
 * const [nodes, setNodes] = useDiffState('nodes', initialNodes);
 *
 * // With options for diff visualization
 * const [nodes, setNodes] = useDiffState('nodes', initialNodes, {
 *   description: 'Product roadmap nodes',
 *   diffMode: 'holdAccept',
 *   computeState: (oldState, newState) => {
 *     return addDiffToArrayObjs(oldState, newState, 'id', '/data');
 *   }
 * });
 *
 * // With custom setters
 * const [nodes, setNodes] = useDiffState('nodes', initialNodes, {
 *   customSetters: {
 *     addNode: {
 *       name: 'addNode',
 *       description: 'Add a new node',
 *       parameters: [{ name: 'node', type: 'Node', description: 'Node to add' }],
 *       execute: (currentNodes, setValue, node) => {
 *         setValue([...currentNodes, node]);
 *       }
 *     }
 *   }
 * });
 * ```
 */
declare function useDiffState<T extends BasicStateValue>(key: string, initialValue: T, options?: {
    description?: string;
    stateSetters?: Record<string, Setter<T>>;
    schema?: ZodSchema<T>;
    diffMode?: DiffMode;
    computeState?: ComputeStateFunction<T>;
}): [T, (newValue: T) => void];
/**
 * Hook that provides access to diff operations for a state registered with useDiffState.
 * This allows components to access undo/redo and diff management functions without
 * needing to manage the state registration themselves.
 *
 * @param key The key of the diff state to access operations for.
 * @returns Object with diff operation functions, or null if state not found.
 *
 * @example
 * ```typescript
 * // In one component, register the diff state
 * const [nodes, setNodes] = useDiffState('nodes', initialNodes);
 *
 * // In another component, access diff operations
 * const nodesDiffOps = useDiffStateOperations('nodes');
 * if (nodesDiffOps) {
 *   const { undo, redo, acceptAllDiffs, rejectAllDiffs } = nodesDiffOps;
 *   // Use the operations...
 * }
 * ```
 */
declare function useDiffStateOperations<T extends BasicStateValue>(key: string): {
    undo: () => boolean;
    redo: () => boolean;
    acceptAllDiffs: () => boolean;
    rejectAllDiffs: () => boolean;
    oldState: T | undefined;
    newState: T | undefined;
} | null;

export { useDiffState, useDiffStateOperations };
