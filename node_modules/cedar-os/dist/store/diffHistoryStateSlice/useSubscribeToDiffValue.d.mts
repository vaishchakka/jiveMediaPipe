/**
 * Options for the useSubscribeToDiffValue hook
 */
interface UseSubscribeToDiffValueOptions {
    /**
     * Optional default value to return if the pointer doesn't resolve
     */
    defaultValue?: unknown;
    /**
     * Optional equality function for shallow comparison
     */
    equalityFn?: (a: unknown, b: unknown) => boolean;
}
/**
 * Return type for the useSubscribeToDiffValue hook
 */
interface DiffValue<T = unknown> {
    /**
     * The old value at the specified path
     */
    oldValue: T | undefined;
    /**
     * The new value at the specified path
     */
    newValue: T | undefined;
    /**
     * Whether the state is currently in diff mode
     */
    isDiffMode: boolean;
    /**
     * The clean value based on the diff mode
     * - If diffMode is 'defaultAccept': returns newValue
     * - If diffMode is 'holdAccept': returns oldValue
     */
    cleanValue: T | undefined;
    /**
     * Whether there is a difference between old and new values
     */
    hasChanges: boolean;
}
/**
 * Hook to subscribe to a specific value within a diff state using JSON Pointer paths
 *
 * @param key - The key of the diff history state to subscribe to
 * @param path - The JSON Pointer path (e.g., '/title', '/user/name', '/items/0')
 * @param options - Optional configuration
 * @returns The old value, new value, isDiffMode flag, and clean value at the specified path
 *
 * @example
 * ```tsx
 * // Subscribe to the title field
 * const { oldValue, newValue, isDiffMode, cleanValue } = useSubscribeToDiffValue('myState', '/title');
 *
 * // Subscribe to a nested field
 * const { oldValue, newValue } = useSubscribeToDiffValue('myState', '/user/profile/name');
 *
 * // Subscribe to an array element
 * const { oldValue, newValue } = useSubscribeToDiffValue('myState', '/items/0');
 *
 * // With default value
 * const { cleanValue } = useSubscribeToDiffValue('myState', '/optionalField', {
 *   defaultValue: 'N/A'
 * });
 * ```
 */
declare function useSubscribeToDiffValue<T = unknown>(key: string, path: string, options?: UseSubscribeToDiffValueOptions): DiffValue<T>;
/**
 * Hook to subscribe to multiple values within a diff state using JSON Pointer paths
 *
 * @param key - The key of the diff history state to subscribe to
 * @param paths - Array of JSON Pointer paths
 * @param options - Optional configuration
 * @returns An object mapping paths to their diff values
 *
 * @example
 * ```tsx
 * const values = useSubscribeToDiffValues('myState', ['/title', '/description', '/status']);
 *
 * // Access individual values
 * console.log(values['/title'].oldValue, values['/title'].newValue);
 * ```
 */
declare function useSubscribeToDiffValues(key: string, paths: string[], options?: UseSubscribeToDiffValueOptions): Record<string, DiffValue>;

export { type DiffValue, type UseSubscribeToDiffValueOptions, useSubscribeToDiffValue, useSubscribeToDiffValues };
