{"version":3,"sources":["../../../../src/store/agentConnection/responseProcessors/setStateResponseProcessor.ts"],"sourcesContent":["import { ResponseProcessor } from '@/store/agentConnection/AgentConnectionTypes';\nimport { SetStateResponse } from '@/store/agentConnection/responseProcessors/createResponseProcessor';\nimport { MessageInput } from '@/store/messages/MessageTypes';\n\n// SetState response processor - generic setState handling\nexport const setStateResponseProcessor: ResponseProcessor<SetStateResponse> = {\n\ttype: 'setState' as const,\n\tnamespace: 'default',\n\texecute: async (obj, store) => {\n\t\t// Support both array and any other args format\n\t\tconst args = 'args' in obj ? obj.args : undefined;\n\t\t// Pass options with isDiff set to true for setState responses\n\t\tstore.executeStateSetter({\n\t\t\tkey: obj.stateKey,\n\t\t\tsetterKey: obj.setterKey,\n\t\t\toptions: { isDiff: true },\n\t\t\targs,\n\t\t});\n\t\tstore.addMessage(obj as unknown as MessageInput);\n\t},\n\tvalidate: (obj): obj is SetStateResponse =>\n\t\t(obj.type === 'setState' || obj.type === 'action') &&\n\t\t'stateKey' in obj &&\n\t\t'setterKey' in obj &&\n\t\ttypeof obj.stateKey === 'string' &&\n\t\ttypeof obj.setterKey === 'string',\n};\n"],"mappings":";AAKO,IAAM,4BAAiE;AAAA,EAC7E,MAAM;AAAA,EACN,WAAW;AAAA,EACX,SAAS,OAAO,KAAK,UAAU;AAE9B,UAAM,OAAO,UAAU,MAAM,IAAI,OAAO;AAExC,UAAM,mBAAmB;AAAA,MACxB,KAAK,IAAI;AAAA,MACT,WAAW,IAAI;AAAA,MACf,SAAS,EAAE,QAAQ,KAAK;AAAA,MACxB;AAAA,IACD,CAAC;AACD,UAAM,WAAW,GAA8B;AAAA,EAChD;AAAA,EACA,UAAU,CAAC,SACT,IAAI,SAAS,cAAc,IAAI,SAAS,aACzC,cAAc,OACd,eAAe,OACf,OAAO,IAAI,aAAa,YACxB,OAAO,IAAI,cAAc;AAC3B;","names":[]}