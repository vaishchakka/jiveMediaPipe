import { _ as OpenAIParams, R as AnthropicParams, Q as AISDKParams, Z as MastraParams, V as CustomParams, Y as LLMResponse, a1 as StreamHandler, a2 as StreamResponse, $ as ProviderConfig } from '../../index-DGEVvAGh.js';
import 'zustand';
import 'zod';
import '../agentContext/AgentContextTypes.js';
import 'react';
import '@tiptap/core';
import '../spellSlice/SpellTypes.js';
import 'fast-json-patch';
import '../toolsSlice/ToolsTypes.js';

type GetParamsForProvider<T extends ProviderConfig['provider']> = T extends 'openai' ? OpenAIParams : T extends 'anthropic' ? AnthropicParams : T extends 'mastra' ? MastraParams : T extends 'ai-sdk' ? AISDKParams : T extends 'custom' ? CustomParams : never;
interface TypedAgentConnection<T extends ProviderConfig['provider']> {
    callLLM: (params: GetParamsForProvider<T>) => Promise<LLMResponse>;
    streamLLM: (params: GetParamsForProvider<T>, handler: StreamHandler) => StreamResponse;
    isConnected: boolean;
    isStreaming: boolean;
}
/**
 * Hook that provides properly typed agent connection methods based on the provider type
 *
 * @example
 * ```typescript
 * // With OpenAI provider
 * const { callLLM } = useTypedAgentConnection('openai');
 * // TypeScript knows that callLLM requires { prompt, model, ... }
 *
 * // With Mastra provider
 * const { callLLM } = useTypedAgentConnection('mastra');
 * // TypeScript knows that callLLM requires { prompt, route, ... }
 * ```
 */
declare function useTypedAgentConnection<T extends ProviderConfig['provider']>(providerType: T): TypedAgentConnection<T>;
/**
 * Hook that infers the provider type from the current configuration
 *
 * @example
 * ```typescript
 * const connection = useAgentConnection();
 * if (connection.provider === 'openai') {
 *   // TypeScript narrows the type
 *   connection.callLLM({ prompt: '...', model: 'gpt-4' });
 * }
 * ```
 */
declare function useAgentConnection(): {
    callLLM: (params: OpenAIParams | AnthropicParams | AISDKParams | MastraParams | CustomParams) => Promise<LLMResponse>;
    streamLLM: (params: OpenAIParams | AnthropicParams | AISDKParams | MastraParams | CustomParams, handler: StreamHandler) => StreamResponse;
    isConnected: boolean;
    isStreaming: boolean;
    provider: "custom" | "openai" | "anthropic" | "mastra" | "ai-sdk";
};

export { useAgentConnection, useTypedAgentConnection };
