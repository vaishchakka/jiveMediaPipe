import { ToolsMap, ToolRegistrationConfig } from './toolsSlice/ToolsTypes.mjs';
export { RegisteredTool, RegisteredToolBase, ToolFunction, ToolsActions, ToolsSlice, ToolsState } from './toolsSlice/ToolsTypes.mjs';
import { P as CedarStore, aA as ChatInput, aB as DebugLogEntry, U as BaseParams, Y as LLMResponse, av as DiffHistoryState, M as Message, s as MessageInput, aC as SpellMap, aD as SpellRegistration, aE as StylingConfig, ar as VoiceState } from '../index-XdHpD8cC.mjs';
export { m as BaseMessage, D as DefaultMessage, aw as DiffHistorySlice, at as DiffMode, au as DiffState, q as MessageByType, t as MessageRenderer, as as SpellSlice, aJ as SpellState, J as TypedMessage, aH as VoiceActions, aG as VoiceSlice, az as createDiffHistorySlice, aI as createSpellSlice, aF as createVoiceSlice } from '../index-XdHpD8cC.mjs';
export { useCedarDiffState } from './diffHistoryStateSlice/useCedarDiffState.mjs';
import * as zustand from 'zustand';
import { ActivationState } from './spellSlice/SpellTypes.mjs';
export { ActivationConditions, ActivationEvent, ActivationMode, CommonHotkeyCombo, Hotkey, HotkeyCombo, MouseEvent, SelectionEvent } from './spellSlice/SpellTypes.mjs';
export { UseSpellOptions, UseSpellReturn, useSpell } from './spellSlice/useSpell.mjs';
export { createToolsSlice } from './toolsSlice/toolsSlice.mjs';
export { UseRegisterFrontendToolOptions, useRegisterFrontendTool } from './toolsSlice/useRegisterFrontendTool.mjs';
import * as _tiptap_core from '@tiptap/core';
export { CreateCedarStoreOptions, createCedarStore } from './createCedarStore.mjs';
export { TypedMessagesSlice, createTypedMessagesSlice } from './messages/createTypedMessagesSlice.mjs';
export { useMultipleSpells } from './spellSlice/useMultipleSpells.mjs';
import 'zod';
import './agentContext/AgentContextTypes.mjs';
import 'react';
import 'fast-json-patch';
import 'zustand/middleware';

declare const useCedarStore: zustand.UseBoundStore<zustand.StoreApi<CedarStore>>;
declare const useMessages: () => {
    messages: Message[];
    isProcessing: boolean;
    showChat: boolean;
    setMessages: (messages: Message[], threadId?: string) => void;
    addMessage: (message: MessageInput, isComplete?: boolean, threadId?: string) => Message;
    clearMessages: (threadId?: string) => void;
    setIsProcessing: (isProcessing: boolean) => void;
    setShowChat: (showChat: boolean) => void;
};
declare const useThreadMessages: (threadId?: string) => {
    messages: Message[];
    threadId: string;
    lastLoaded: string;
    isCurrentThread: boolean;
    setMessages: (messages: Message[]) => void;
    addMessage: (message: MessageInput, isComplete?: boolean) => Message;
    clearMessages: () => void;
    switchToThread: () => void;
};
declare const useThreadController: () => {
    currentThreadId: string;
    threadIds: string[];
    setMainThreadId: (threadId: string) => void;
    createThread: (threadId?: string, name?: string) => string;
    deleteThread: (threadId: string) => void;
    switchThread: (threadId: string, name?: string) => void;
    updateThreadName: (threadId: string, name: string) => void;
    getAllThreadIds: () => string[];
};
declare const setCedarStore: {
    (partial: CedarStore | Partial<CedarStore> | ((state: CedarStore) => CedarStore | Partial<CedarStore>), replace?: false): void;
    (state: CedarStore | ((state: CedarStore) => CedarStore), replace: true): void;
};
declare const useStyling: () => {
    styling: StylingConfig;
    setStyling: (styling: Partial<StylingConfig>) => void;
    toggleDarkMode: () => void;
};
declare const useChatInput: () => {
    chatInputContent: _tiptap_core.JSONContent | null;
    setChatInputContent: (content: ChatInput) => void;
    overrideInputContent: {
        input: string | _tiptap_core.JSONContent[] | null;
    };
    setOverrideInputContent: (content: string | _tiptap_core.JSONContent[] | null) => void;
};
declare const registerState: CedarStore['registerState'];
declare const getCedarState: CedarStore['getCedarState'];
declare const setCedarState: CedarStore['setCedarState'];

declare const useVoice: () => {
    isVoiceEnabled: boolean;
    isListening: boolean;
    isSpeaking: boolean;
    voicePermissionStatus: "granted" | "denied" | "prompt" | "not-supported";
    voiceError: string | null;
    voiceSettings: {
        language: string;
        voiceId?: string;
        pitch?: number;
        rate?: number;
        volume?: number;
        useBrowserTTS?: boolean;
        autoAddToMessages?: boolean;
        endpoint?: string;
        stream?: boolean;
    };
    requestVoicePermission: () => Promise<void>;
    checkVoiceSupport: () => boolean;
    startListening: () => Promise<void>;
    stopListening: () => void;
    toggleVoice: () => void;
    updateVoiceSettings: (settings: Partial<VoiceState["voiceSettings"]>) => void;
    setVoiceError: (error: string | null) => void;
    resetVoiceState: () => void;
};
declare const useDebugger: () => {
    agentConnectionLogs: DebugLogEntry[];
    maxLogs: number;
    isDebugEnabled: boolean;
    logAgentRequest: (params: BaseParams, provider: string) => string;
    logAgentResponse: (requestId: string, response: LLMResponse) => void;
    logAgentError: (requestId: string, error: Error) => void;
    logStreamStart: (params: BaseParams, provider: string) => string;
    logStreamChunk: (streamId: string, chunk: string) => void;
    logStreamEnd: (streamId: string, completedItems?: (string | object)[]) => void;
    clearDebugLogs: () => void;
    setDebugEnabled: (enabled: boolean) => void;
    setMaxLogs: (max: number) => void;
};

declare const useSpells: () => {
    spells: Partial<SpellMap>;
    registerSpell: (registration: SpellRegistration) => void;
    unregisterSpell: (spellId: string) => void;
    activateSpell: (spellId: string, triggerData?: ActivationState["triggerData"]) => void;
    deactivateSpell: (spellId: string) => void;
    toggleSpell: (spellId: string) => void;
    clearSpells: () => void;
};
declare const useDiffHistory: () => {
    diffHistoryStates: Record<string, DiffHistoryState<any>>;
    getDiffHistoryState: <T>(key: string) => DiffHistoryState<T> | undefined;
    getCleanState: <T>(key: string) => T | undefined;
    setDiffState: <T>(key: string, diffHistoryState: DiffHistoryState<T>) => void;
    newDiffState: <T>(key: string, newState: T, isDiffChange?: boolean) => void;
    acceptAllDiffs: (key: string) => boolean;
    rejectAllDiffs: (key: string) => boolean;
    undo: (key: string) => boolean;
    redo: (key: string) => boolean;
};

declare const useTools: () => {
    registeredTools: ToolsMap;
    registerTool: <TArgs>(config: ToolRegistrationConfig<TArgs>) => void;
    unregisterTool: (name: string) => void;
    executeTool: <TArgs>(name: string, args: TArgs) => Promise<void>;
    getRegisteredTools: () => ToolsMap;
    clearTools: () => void;
};

export { ActivationState, DiffHistoryState, SpellMap, SpellRegistration, ToolRegistrationConfig, ToolsMap, VoiceState, getCedarState, registerState, setCedarState, setCedarStore, useCedarStore, useChatInput, useDebugger, useDiffHistory, useMessages, useSpells, useStyling, useThreadController, useThreadMessages, useTools, useVoice };
