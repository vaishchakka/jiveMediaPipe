{"version":3,"sources":["../../../../src/store/messages/renderers/createMessageRenderer.ts"],"sourcesContent":["import {\n\tMessageRenderer,\n\tMessage,\n\tCustomMessage,\n} from '@/store/messages/MessageTypes';\nimport React from 'react';\n\nexport function createMessageRenderer<T extends Message>(\n\tp: MessageRenderer<T>\n): MessageRenderer<Message> {\n\t// cast-through-unknown to bypass the contravariance error\n\treturn p as unknown as MessageRenderer<Message>;\n}\n\n// ---------------------------------------------------------------------------\n// Helper types and factory for SetState chat messages\n// ---------------------------------------------------------------------------\n\nexport type SetStateMessagePayload = {\n\tstateKey: string;\n\tsetterKey: string;\n\targs?: unknown;\n};\n\nexport type SetStateMessage = CustomMessage<'setState', SetStateMessagePayload>;\n\n// Helper to derive a narrower setState message type\nexport type SetStateMessageFor<\n\tStateKey extends string,\n\tSetterKey extends string,\n\tArgs\n> = CustomMessage<\n\t'setState',\n\t{ stateKey: StateKey; setterKey: SetterKey; args: Args }\n>;\n\n// Legacy action message types for backwards compatibility\nexport type LegacyActionMessagePayload = SetStateMessagePayload; // Same structure\n\nexport type LegacyActionMessage = CustomMessage<\n\t'action',\n\tLegacyActionMessagePayload\n>;\n\n// Helper to derive a narrower legacy action message type\nexport type LegacyActionMessageFor<\n\tStateKey extends string,\n\tSetterKey extends string,\n\tArgs = unknown\n> = CustomMessage<\n\t'action',\n\t{ stateKey: StateKey; setterKey: SetterKey; args: Args }\n>;\n\n// Factory to create a SetState message renderer with optional filtering\nexport function createSetStateMessageRenderer<\n\tT extends SetStateMessage\n>(config: {\n\tnamespace?: string;\n\t/** Optional setterKey filter; if provided the renderer only handles msgs with this key */\n\tsetterKey?: string;\n\trender: (msg: T) => React.ReactNode;\n\tvalidateMessage?: (msg: Message) => msg is T;\n}): MessageRenderer<Message> {\n\tconst { namespace, setterKey, render, validateMessage } = config;\n\n\tconst defaultValidate = (msg: Message): msg is SetStateMessage => {\n\t\tif (msg.type !== 'setState') return false;\n\t\tif (setterKey && (msg as SetStateMessage).setterKey !== setterKey)\n\t\t\treturn false;\n\t\treturn true;\n\t};\n\n\tconst rendererFn = (message: Message) => {\n\t\treturn render(message as T);\n\t};\n\n\treturn {\n\t\ttype: 'setState',\n\t\tnamespace,\n\t\trender: rendererFn,\n\t\tvalidateMessage: validateMessage ?? defaultValidate,\n\t} as unknown as MessageRenderer<Message>;\n}\n\n// Factory to create a legacy action message renderer with optional filtering (backwards compatibility)\nexport function createLegacyActionMessageRenderer<\n\tT extends LegacyActionMessage\n>(config: {\n\tnamespace?: string;\n\t/** Optional setterKey filter; if provided the renderer only handles msgs with this key */\n\tsetterKey?: string;\n\trender: (msg: T) => React.ReactNode;\n\tvalidateMessage?: (msg: Message) => msg is T;\n}): MessageRenderer<Message> {\n\tconst { namespace, setterKey, render, validateMessage } = config;\n\n\tconst defaultValidate = (msg: Message): msg is LegacyActionMessage => {\n\t\tif (msg.type !== 'action') return false;\n\t\tif (setterKey && (msg as LegacyActionMessage).setterKey !== setterKey)\n\t\t\treturn false;\n\t\treturn true;\n\t};\n\n\tconst rendererFn = (message: Message) => {\n\t\treturn render(message as T);\n\t};\n\n\treturn {\n\t\ttype: 'action',\n\t\tnamespace,\n\t\trender: rendererFn,\n\t\tvalidateMessage: validateMessage ?? defaultValidate,\n\t} as unknown as MessageRenderer<Message>;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOO,SAAS,sBACf,GAC2B;AAE3B,SAAO;AACR;AA2CO,SAAS,8BAEd,QAM2B;AAC5B,QAAM,EAAE,WAAW,WAAW,QAAQ,gBAAgB,IAAI;AAE1D,QAAM,kBAAkB,CAAC,QAAyC;AACjE,QAAI,IAAI,SAAS,WAAY,QAAO;AACpC,QAAI,aAAc,IAAwB,cAAc;AACvD,aAAO;AACR,WAAO;AAAA,EACR;AAEA,QAAM,aAAa,CAAC,YAAqB;AACxC,WAAO,OAAO,OAAY;AAAA,EAC3B;AAEA,SAAO;AAAA,IACN,MAAM;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,IACR,iBAAiB,mBAAmB;AAAA,EACrC;AACD;AAGO,SAAS,kCAEd,QAM2B;AAC5B,QAAM,EAAE,WAAW,WAAW,QAAQ,gBAAgB,IAAI;AAE1D,QAAM,kBAAkB,CAAC,QAA6C;AACrE,QAAI,IAAI,SAAS,SAAU,QAAO;AAClC,QAAI,aAAc,IAA4B,cAAc;AAC3D,aAAO;AACR,WAAO;AAAA,EACR;AAEA,QAAM,aAAa,CAAC,YAAqB;AACxC,WAAO,OAAO,OAAY;AAAA,EAC3B;AAEA,SAAO;AAAA,IACN,MAAM;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,IACR,iBAAiB,mBAAmB;AAAA,EACrC;AACD;","names":[]}