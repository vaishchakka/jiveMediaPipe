import { M as Message, t as MessageRenderer, n as CustomMessage } from '../../../index-XdHpD8cC.mjs';
import React__default from 'react';
import 'zustand';
import 'zod';
import '../../agentContext/AgentContextTypes.mjs';
import '@tiptap/core';
import '../../spellSlice/SpellTypes.mjs';
import 'fast-json-patch';
import '../../toolsSlice/ToolsTypes.mjs';

declare function createMessageRenderer<T extends Message>(p: MessageRenderer<T>): MessageRenderer<Message>;
type SetStateMessagePayload = {
    stateKey: string;
    setterKey: string;
    args?: unknown;
};
type SetStateMessage = CustomMessage<'setState', SetStateMessagePayload>;
type SetStateMessageFor<StateKey extends string, SetterKey extends string, Args> = CustomMessage<'setState', {
    stateKey: StateKey;
    setterKey: SetterKey;
    args: Args;
}>;
type LegacyActionMessagePayload = SetStateMessagePayload;
type LegacyActionMessage = CustomMessage<'action', LegacyActionMessagePayload>;
type LegacyActionMessageFor<StateKey extends string, SetterKey extends string, Args = unknown> = CustomMessage<'action', {
    stateKey: StateKey;
    setterKey: SetterKey;
    args: Args;
}>;
declare function createSetStateMessageRenderer<T extends SetStateMessage>(config: {
    namespace?: string;
    /** Optional setterKey filter; if provided the renderer only handles msgs with this key */
    setterKey?: string;
    render: (msg: T) => React__default.ReactNode;
    validateMessage?: (msg: Message) => msg is T;
}): MessageRenderer<Message>;
declare function createLegacyActionMessageRenderer<T extends LegacyActionMessage>(config: {
    namespace?: string;
    /** Optional setterKey filter; if provided the renderer only handles msgs with this key */
    setterKey?: string;
    render: (msg: T) => React__default.ReactNode;
    validateMessage?: (msg: Message) => msg is T;
}): MessageRenderer<Message>;

export { type LegacyActionMessage, type LegacyActionMessageFor, type LegacyActionMessagePayload, type SetStateMessage, type SetStateMessageFor, type SetStateMessagePayload, createLegacyActionMessageRenderer, createMessageRenderer, createSetStateMessageRenderer };
