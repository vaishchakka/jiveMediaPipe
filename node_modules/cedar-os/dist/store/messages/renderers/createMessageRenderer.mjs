// src/store/messages/renderers/createMessageRenderer.ts
function createMessageRenderer(p) {
  return p;
}
function createSetStateMessageRenderer(config) {
  const { namespace, setterKey, render, validateMessage } = config;
  const defaultValidate = (msg) => {
    if (msg.type !== "setState") return false;
    if (setterKey && msg.setterKey !== setterKey)
      return false;
    return true;
  };
  const rendererFn = (message) => {
    return render(message);
  };
  return {
    type: "setState",
    namespace,
    render: rendererFn,
    validateMessage: validateMessage ?? defaultValidate
  };
}
function createLegacyActionMessageRenderer(config) {
  const { namespace, setterKey, render, validateMessage } = config;
  const defaultValidate = (msg) => {
    if (msg.type !== "action") return false;
    if (setterKey && msg.setterKey !== setterKey)
      return false;
    return true;
  };
  const rendererFn = (message) => {
    return render(message);
  };
  return {
    type: "action",
    namespace,
    render: rendererFn,
    validateMessage: validateMessage ?? defaultValidate
  };
}
export {
  createLegacyActionMessageRenderer,
  createMessageRenderer,
  createSetStateMessageRenderer
};
//# sourceMappingURL=createMessageRenderer.mjs.map