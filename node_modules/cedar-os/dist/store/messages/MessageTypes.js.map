{"version":3,"sources":["../../../src/store/messages/MessageTypes.ts"],"sourcesContent":["import { CedarStore } from '@/store/CedarOSTypes';\nimport type { ReactNode } from 'react';\n\nexport interface ChatResponse {\n\tmessages: Message[];\n}\n\n// Base properties that all messages share\nexport interface BaseMessage {\n\tid: string;\n\trole: MessageRole;\n\tcontent: string;\n\tcreatedAt?: string;\n\tmetadata?: Record<string, unknown>;\n\ttype: string;\n}\n\n// Helper for creating typed messages\nexport type TypedMessage<T extends string, P = {}> = BaseMessage & {\n\ttype: T;\n} & P;\n\n// Message types\nexport type MessageRole = 'bot' | 'user' | 'assistant';\n\n// Type for input messages where ID is optional - will be auto-generated if not provided\nexport type MessageInput =\n\t| (Omit<TextMessage, 'id'> & { id?: string })\n\t| (Omit<StorylineMessage, 'id'> & { id?: string })\n\t| (Omit<MultipleChoiceMessage, 'id'> & { id?: string })\n\t| (Omit<TodoListMessage, 'id'> & { id?: string })\n\t| (Omit<DialogueOptionsMessage, 'id'> & { id?: string })\n\t| (Omit<TickerMessage, 'id'> & { id?: string })\n\t| (Omit<SliderMessage, 'id'> & { id?: string })\n\t| (Omit<CustomMessage<string, Record<string, unknown>>, 'id'> & {\n\t\t\tid?: string;\n\t  });\n\n// Default Cedar message types as a union\nexport type DefaultMessage =\n\t| TextMessage\n\t| TodoListMessage\n\t| TickerMessage\n\t| DialogueOptionsMessage\n\t| MultipleChoiceMessage\n\t| StorylineMessage\n\t| SliderMessage;\n\n// Type helper to extract a specific message by type\nexport type MessageByType<T extends string, M = DefaultMessage> = Extract<\n\tM,\n\t{ type: T }\n>;\n\n// Keep the old Message type for backwards compatibility\nexport type Message = DefaultMessage | CustomMessage<string, object>;\n\n// Message that contains text content\nexport type TextMessage = BaseMessage & {\n\ttype: 'text';\n};\n\nexport type StorylineMessage = BaseMessage & {\n\ttype: 'storyline';\n\tsections: StorylineSection[];\n};\n\nexport type StorylineSection =\n\t| {\n\t\t\ttype: 'storyline_section';\n\t\t\ttitle: string;\n\t\t\ticon?: string;\n\t\t\tdescription: string;\n\t  }\n\t| string;\n\n// Insert new message types\nexport interface TodoListItem {\n\ttext: string;\n\tdone: boolean;\n\tdescription?: string;\n}\n\nexport interface TodoListMessage extends BaseMessage {\n\ttype: 'todolist';\n\titems: TodoListItem[];\n}\n\nexport interface MultipleChoiceMessage extends BaseMessage {\n\ttype: 'multiple_choice';\n\tchoices: string[];\n\tallowFreeInput?: boolean;\n\tmultiselect?: boolean;\n\t/** Optional callback when a choice is selected */\n\tonChoice?: (choice: string, store: CedarStore) => void;\n}\n\n// Button type for ticker\nexport interface TickerButton {\n\ttitle: string;\n\tdescription: string;\n\ticon?: ReactNode;\n\tcolour?: string;\n}\n\n/** Message type for ticker display */\nexport interface TickerMessage extends BaseMessage {\n\ttype: 'ticker';\n\t// Buttons to display in the ticker\n\tbuttons: TickerButton[];\n\t/** Optional callback when Next is clicked */\n\tonChoice?: (store: CedarStore) => void;\n}\n\n// Add dialogue options message type\nexport interface DialogueOptionChoice {\n\ttitle: string;\n\tdescription?: string;\n\ticon?: ReactNode;\n\thoverText?: string;\n}\n\nexport interface DialogueOptionsMessage extends BaseMessage {\n\ttype: 'dialogue_options';\n\toptions: DialogueOptionChoice[];\n\tallowFreeInput?: boolean;\n\t/** Optional callback when an option is selected */\n\tonChoice?: (choice: DialogueOptionChoice | string, store: CedarStore) => void;\n}\n\n// Slider message type for slider input\nexport interface SliderMessage extends BaseMessage {\n\ttype: 'slider';\n\tmin: number;\n\tmax: number;\n\tonChange?: (value: number, store: CedarStore) => void;\n}\n\n// Export a type helper for creating custom message types\nexport type CustomMessage<\n\tT extends string,\n\tP extends object = Record<string, never>\n> = BaseMessage & { type: T } & P;\n\n// Message renderer function type - now typed to accept BaseMessage and return ReactNode\nexport type MessageRenderer<T extends Message = Message> = {\n\ttype: T['type'];\n\trender: (message: T) => ReactNode;\n\tnamespace?: string;\n\tvalidateMessage?: (message: Message) => message is T;\n};\n\n// Registry for message renderers\nexport type MessageRendererRegistry = Record<\n\tstring,\n\tMessageRenderer | undefined\n>;\n\n// Thread-specific types\nexport interface MessageThread {\n\tid: string;\n\tname?: string; // Optional display name for the thread\n\tlastLoaded: string; // ISO timestamp\n\tmessages: Message[];\n}\n\nexport type MessageThreadMap = Record<string, MessageThread>;\n\n// Default thread ID constant\nexport const DEFAULT_THREAD_ID = 'default-thread';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAyKO,IAAM,oBAAoB;","names":[]}