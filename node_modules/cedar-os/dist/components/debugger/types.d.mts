import { r as registeredState } from '../../index-XdHpD8cC.mjs';
import 'zustand';
import 'zod';
import '../../store/agentContext/AgentContextTypes.mjs';
import 'react';
import '@tiptap/core';
import '../../store/spellSlice/SpellTypes.mjs';
import 'fast-json-patch';
import '../../store/toolsSlice/ToolsTypes.mjs';

interface DebugLogEntry {
    id: string;
    timestamp: Date;
    type: 'request' | 'response' | 'error' | 'stream-complete' | 'stream-error' | 'handler';
    provider?: string;
    apiRoute?: string;
    processorName?: string;
    data: {
        params?: Record<string, unknown>;
        response?: Record<string, unknown>;
        error?: Error;
        streamContent?: string;
        streamObjects?: object[];
        completedItems?: (string | object)[];
        handledObject?: Record<string, unknown>;
        handlers?: Array<{
            processorName: string;
            handledObject: Record<string, unknown>;
        }>;
    };
    duration?: number;
}
interface Message {
    id: string;
    role: 'user' | 'assistant' | 'bot';
    type: string;
    content?: string;
    timestamp?: string;
    createdAt?: string;
    threadId?: string;
    [key: string]: unknown;
}
interface Badge {
    label: string;
    color: 'gray' | 'blue' | 'green' | 'purple' | 'red' | 'yellow' | 'amber';
}
interface CollapsibleSectionProps {
    id: string;
    title: string;
    isExpanded: boolean;
    onToggle: () => void;
    badges: Badge[];
    children: React.ReactNode;
}
interface TabProps {
    onCopy: (text: string, id: string) => void;
    copiedId: string | null;
}
interface NetworkTabProps extends TabProps {
    logs: DebugLogEntry[];
}
interface MessagesTabProps extends TabProps {
    messages: Message[];
}
interface StatesTabProps extends TabProps {
    states: Record<string, registeredState>;
    diffStates?: Record<string, any>;
}

export type { Badge, CollapsibleSectionProps, DebugLogEntry, Message, MessagesTabProps, NetworkTabProps, StatesTabProps, TabProps };
