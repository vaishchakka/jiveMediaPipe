import * as react from 'react';
import { ComponentProps } from 'react';
import { Point, SpringOptions, HTMLMotionProps, MotionValue, MotionConfig, MotionProps } from 'motion/react';
import * as react_jsx_runtime from 'react/jsx-runtime';
import * as motion_dom from 'motion-dom';

type CursorProps = {
    follow?: boolean;
    center?: Point;
    offset?: Point;
    spring?: false | SpringOptions;
    magnetic?: boolean | Partial<MagneticOptions>;
    matchTextSize?: boolean;
};
type MagneticOptions = {
    morph: boolean;
    padding: number;
    snap: number;
};

declare function Cursor({ follow, center, offset: offsetPoint, spring, magnetic, matchTextSize, children, style, ...props }: CursorProps & HTMLMotionProps<"div">): react.ReactPortal | null;

declare function useCursorIsInView(resetSpring: VoidFunction): boolean;

type CursorType = "pointer" | "default" | "text";
interface CursorState {
    type: CursorType;
    isPressed: boolean;
    fontSize: number | null;
    targetBoundingBox: {
        width: number;
        height: number;
        top: number;
        right: number;
        bottom: number;
        left: number;
    } | null;
    target: CursorTarget | null;
    zone: string | null;
}
type CursorTarget = HTMLElement | SVGElement;

declare function useCursorState(): CursorState;

declare function usePointerPosition(): {
    x: MotionValue<number>;
    y: MotionValue<number>;
};

declare function useMagneticPull(ref: React.RefObject<HTMLElement | null>, pull?: number): {
    x: MotionValue<number>;
    y: MotionValue<number>;
};

type AnimateNumberProps = Omit<HTMLMotionProps<"span">, "children"> & {
    children: number | bigint | string;
    locales?: Intl.LocalesArgument;
    format?: Omit<Intl.NumberFormatOptions, "notation"> & {
        notation?: Exclude<Intl.NumberFormatOptions["notation"], "scientific" | "engineering">;
    };
    transition?: ComponentProps<typeof MotionConfig>["transition"];
    suffix?: string;
    prefix?: string;
};
declare const AnimateNumber: react.ForwardRefExoticComponent<Omit<AnimateNumberProps, "ref"> & react.RefAttributes<HTMLDivElement>>;

interface AnimateTextProps {
    children: string;
    splitBy?: string;
    charClass?: string;
    wordClass?: string;
    lineClass?: string;
    type?: "char" | "word" | "line";
    variants?: MotionProps["variants"];
}
declare function AnimateText({ children, splitBy, charClass, wordClass, lineClass, type, variants, ...props }: AnimateTextProps): react_jsx_runtime.JSX.Element;

/**
 * Props for the Ticker component.
 */
interface TickerProps {
    /**
     * An array of React nodes to be rendered as ticker items.
     */
    items: React.ReactNode[];
    /**
     * The axis along which the ticker scrolls. Defaults to "x".
     */
    axis?: "x" | "y";
    /**
     * The velocity of the ticker scroll in pixels per second. Defaults to 50.
     */
    velocity?: number;
    /**
     * Factor by which the velocity is multiplied when the ticker is hovered. Defaults to 1 (no change).
     */
    hoverFactor?: number;
    /**
     * The gap between ticker items in pixels. Defaults to 10.
     */
    gap?: number;
    /**
     * Alignment of items within the ticker. Defaults to "center".
     */
    align?: "start" | "center" | "end";
    /**
     * An optional MotionValue to control the ticker's offset externally.
     */
    offset?: MotionValue<number>;
    /**
     * Whether the ticker should be static. This is a display mode suitable for
     * design canvases that disables animations, measurements and viewport tracking.
     * Defaults to false. **Must** remain static for the duration of the component's lifecycle.
     */
    isStatic?: boolean;
}
/**
 * A performant, accessible, and infinitely scrolling ticker component.
 *
 * @param items - An array of React nodes to be rendered as ticker items.
 * @param velocity - The velocity of the ticker scroll in pixels per second. Defaults to 50.
 * @param hoverFactor - Factor by which the velocity is multiplied when the ticker is hovered. Defaults to 1 (no change).
 * @param gap - The gap between ticker items in pixels. Defaults to 10.
 * @param axis - The axis along which the ticker scrolls. Defaults to "x".
 * @param align - Alignment of items within the ticker. Defaults to "center".
 * @param offset - An optional MotionValue to control the ticker's offset externally.
 * @param isStatic - Whether the ticker should be static. This is a display mode suitable for
 * design canvases that disables animations, measurements and viewport tracking.
 * Defaults to false.
 * @param props - HTML attributes to pass to the ticker container div.
 * @returns A Ticker React component.
 */
declare function Ticker({ items, velocity, hoverFactor, gap, axis, align, offset, isStatic, ...props }: HTMLMotionProps<"div"> & TickerProps): react_jsx_runtime.JSX.Element;

declare function useFocusNavigation(containerRef: React.RefObject<HTMLElement>, axis: "x" | "y", focusOffset: MotionValue<number>, offset: MotionValue<number>, setHasFocus: (hasFocus: boolean) => void): void;

declare function useItemOffset(): motion_dom.MotionValue<number>;

export { AnimateNumber, AnimateText, Cursor, Ticker, useCursorIsInView, useCursorState, useFocusNavigation, useItemOffset, useMagneticPull, usePointerPosition };
export type { AnimateNumberProps, AnimateTextProps };
