"use client";
import { jsx } from 'react/jsx-runtime';
import { useTransform, motion } from 'motion/react';
import { useRef } from 'react';
import { TickerItemContext } from './TickerItemContext.mjs';

/**
 * Represents an individual item within the Ticker.
 *
 * This component handles the logic for repositioning items to create the infinite scroll effect.
 *
 * @param offset - The current scroll offset of the ticker.
 * @param axis - The scroll axis ("x" or "y").
 * @param listSize - The total size of the list including all clones.
 * @param itemIndex - The original index of the item.
 * @param cloneIndex - The index of the clone, if this is a cloned item.
 * @param props - HTML attributes to pass to the list item li element.
 * @returns A ListItem React component.
 */
function TickerItem({ offset, axis, listSize = 0, itemIndex, cloneIndex, bounds, containerPaddingStart, ...props }) {
    const ref = useRef(null);
    const { start, end } = bounds;
    const transform = useTransform(() => {
        const currentOffset = offset.get();
        if ((!start && !end) || !listSize)
            return 0;
        if (currentOffset + end <= -containerPaddingStart) {
            return listSize;
        }
        return 0;
    });
    const itemOffset = useTransform(() => {
        const currentOffset = offset.get();
        const currentTransform = transform.get();
        if ((!start && !end) || !listSize)
            return 0;
        return currentOffset + start + currentTransform;
    });
    return (jsx(TickerItemContext.Provider, { value: { offset: itemOffset }, children: jsx(motion.li, { ref: ref, ...props, className: cloneIndex === undefined ? "ticker-item" : "clone-item", style: {
                flexShrink: 0,
                flexGrow: 0,
                x: axis === "x" ? transform : 0,
                y: axis === "y" ? transform : 0,
            }, "aria-hidden": cloneIndex !== undefined ? true : undefined }) }));
}

export { TickerItem };
