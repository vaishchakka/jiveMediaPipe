{"ast":null,"code":"import { secondsToMilliseconds } from 'motion-utils';\nimport { JSAnimation } from './JSAnimation.mjs';\nimport { NativeAnimation } from './NativeAnimation.mjs';\nimport { replaceTransitionType } from './utils/replace-transition-type.mjs';\nimport { replaceStringEasing } from './waapi/utils/unsupported-easing.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nclass NativeAnimationExtended extends NativeAnimation {\n  constructor(options) {\n    /**\n     * The base NativeAnimation function only supports a subset\n     * of Motion easings, and WAAPI also only supports some\n     * easing functions via string/cubic-bezier definitions.\n     *\n     * This function replaces those unsupported easing functions\n     * with a JS easing function. This will later get compiled\n     * to a linear() easing function.\n     */\n    replaceStringEasing(options);\n    /**\n     * Ensure we replace the transition type with a generator function\n     * before passing to WAAPI.\n     *\n     * TODO: Does this have a better home? It could be shared with\n     * JSAnimation.\n     */\n    replaceTransitionType(options);\n    super(options);\n    if (options.startTime) {\n      this.startTime = options.startTime;\n    }\n    this.options = options;\n  }\n  /**\n   * WAAPI doesn't natively have any interruption capabilities.\n   *\n   * Rather than read commited styles back out of the DOM, we can\n   * create a renderless JS animation and sample it twice to calculate\n   * its current value, \"previous\" value, and therefore allow\n   * Motion to calculate velocity for any subsequent animation.\n   */\n  updateMotionValue(value) {\n    const {\n      motionValue,\n      onUpdate,\n      onComplete,\n      element,\n      ...options\n    } = this.options;\n    if (!motionValue) return;\n    if (value !== undefined) {\n      motionValue.set(value);\n      return;\n    }\n    const sampleAnimation = new JSAnimation({\n      ...options,\n      autoplay: false\n    });\n    const sampleTime = secondsToMilliseconds(this.finishedTime ?? this.time);\n    motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n    sampleAnimation.stop();\n  }\n}\nexport { NativeAnimationExtended };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}