{"ast":null,"code":"import { createStateSlice, setCedarStore } from 'cedar-os';\n\n// Cedar OS state slices for pose management\nexport const poseStateSlice = createStateSlice({\n  name: 'poseState',\n  initialState: {\n    currentPose: null,\n    referencePose: null,\n    similarity: 0,\n    score: 0,\n    isGameActive: false,\n    gameStartTime: null,\n    totalScore: 0,\n    poseHistory: [],\n    frameCount: 0\n  },\n  reducers: {\n    updateCurrentPose: (state, action) => {\n      state.currentPose = action.payload;\n      if (action.payload) {\n        state.poseHistory.push({\n          pose: action.payload,\n          timestamp: Date.now(),\n          frame: state.frameCount++\n        });\n        // Keep only last 100 poses for performance\n        if (state.poseHistory.length > 100) {\n          state.poseHistory = state.poseHistory.slice(-100);\n        }\n      }\n    },\n    updateReferencePose: (state, action) => {\n      state.referencePose = action.payload;\n    },\n    updateSimilarity: (state, action) => {\n      state.similarity = action.payload;\n    },\n    updateScore: (state, action) => {\n      state.score = action.payload;\n      state.totalScore += action.payload;\n    },\n    startGame: state => {\n      state.isGameActive = true;\n      state.gameStartTime = Date.now();\n      state.totalScore = 0;\n      state.poseHistory = [];\n      state.frameCount = 0;\n    },\n    endGame: state => {\n      state.isGameActive = false;\n    },\n    resetGame: state => {\n      state.currentPose = null;\n      state.referencePose = null;\n      state.similarity = 0;\n      state.score = 0;\n      state.isGameActive = false;\n      state.gameStartTime = null;\n      state.totalScore = 0;\n      state.poseHistory = [];\n      state.frameCount = 0;\n    }\n  }\n});\nexport const aiCoachingSlice = createStateSlice({\n  name: 'aiCoaching',\n  initialState: {\n    messages: [],\n    isTyping: false,\n    currentTip: null,\n    improvementSuggestions: [],\n    performanceAnalysis: null,\n    chatHistory: []\n  },\n  reducers: {\n    addMessage: (state, action) => {\n      state.messages.push({\n        id: Date.now(),\n        content: action.payload.content,\n        type: action.payload.type || 'info',\n        // info, tip, warning, success\n        timestamp: Date.now()\n      });\n      // Keep last 50 messages\n      if (state.messages.length > 50) {\n        state.messages = state.messages.slice(-50);\n      }\n    },\n    setTyping: (state, action) => {\n      state.isTyping = action.payload;\n    },\n    updateCurrentTip: (state, action) => {\n      state.currentTip = action.payload;\n    },\n    addImprovementSuggestion: (state, action) => {\n      state.improvementSuggestions.push(action.payload);\n      // Keep last 10 suggestions\n      if (state.improvementSuggestions.length > 10) {\n        state.improvementSuggestions = state.improvementSuggestions.slice(-10);\n      }\n    },\n    updatePerformanceAnalysis: (state, action) => {\n      state.performanceAnalysis = action.payload;\n    },\n    addChatMessage: (state, action) => {\n      state.chatHistory.push({\n        id: Date.now(),\n        message: action.payload.message,\n        sender: action.payload.sender,\n        // 'user' or 'ai'\n        timestamp: Date.now()\n      });\n    },\n    clearMessages: state => {\n      state.messages = [];\n      state.currentTip = null;\n    }\n  }\n});\nexport const diffStateSlice = createStateSlice({\n  name: 'diffState',\n  initialState: {\n    poseDifferences: [],\n    highlightedJoints: [],\n    diffVisualization: null,\n    comparisonMode: 'overlay',\n    // 'overlay', 'sideBySide', 'diff'\n    showDifferenceHeatmap: true,\n    jointAccuracyScores: {}\n  },\n  reducers: {\n    updatePoseDifferences: (state, action) => {\n      state.poseDifferences = action.payload;\n    },\n    highlightJoints: (state, action) => {\n      state.highlightedJoints = action.payload;\n    },\n    setVisualization: (state, action) => {\n      state.diffVisualization = action.payload;\n    },\n    setComparisonMode: (state, action) => {\n      state.comparisonMode = action.payload;\n    },\n    toggleHeatmap: state => {\n      state.showDifferenceHeatmap = !state.showDifferenceHeatmap;\n    },\n    updateJointScores: (state, action) => {\n      state.jointAccuracyScores = action.payload;\n    }\n  }\n});\nexport const voiceControlSlice = createStateSlice({\n  name: 'voiceControl',\n  initialState: {\n    isListening: false,\n    lastCommand: null,\n    recognition: null,\n    voiceFeedbackEnabled: true,\n    availableCommands: ['start game', 'pause game', 'resume game', 'reset game', 'show tips', 'hide tips', 'switch video', 'analyze performance'],\n    commandHistory: []\n  },\n  reducers: {\n    setListening: (state, action) => {\n      state.isListening = action.payload;\n    },\n    addCommand: (state, action) => {\n      state.lastCommand = action.payload;\n      state.commandHistory.push({\n        command: action.payload,\n        timestamp: Date.now(),\n        executed: false\n      });\n      // Keep last 20 commands\n      if (state.commandHistory.length > 20) {\n        state.commandHistory = state.commandHistory.slice(-20);\n      }\n    },\n    markCommandExecuted: state => {\n      if (state.commandHistory.length > 0) {\n        state.commandHistory[state.commandHistory.length - 1].executed = true;\n      }\n    },\n    toggleVoiceFeedback: state => {\n      state.voiceFeedbackEnabled = !state.voiceFeedbackEnabled;\n    },\n    setRecognition: (state, action) => {\n      // Note: We can't store the recognition object directly in state\n      // This would be handled in the component\n    }\n  }\n});\n\n// Initialize Cedar store with our slices\nexport const initializeCedarStore = () => {\n  setCedarStore({\n    slices: [poseStateSlice, aiCoachingSlice, diffStateSlice, voiceControlSlice]\n  });\n};\n\n// Export action creators for easy use\nexport const poseActions = poseStateSlice.actions;\nexport const aiCoachingActions = aiCoachingSlice.actions;\nexport const diffActions = diffStateSlice.actions;\nexport const voiceActions = voiceControlSlice.actions;","map":{"version":3,"names":["createStateSlice","setCedarStore","poseStateSlice","name","initialState","currentPose","referencePose","similarity","score","isGameActive","gameStartTime","totalScore","poseHistory","frameCount","reducers","updateCurrentPose","state","action","payload","push","pose","timestamp","Date","now","frame","length","slice","updateReferencePose","updateSimilarity","updateScore","startGame","endGame","resetGame","aiCoachingSlice","messages","isTyping","currentTip","improvementSuggestions","performanceAnalysis","chatHistory","addMessage","id","content","type","setTyping","updateCurrentTip","addImprovementSuggestion","updatePerformanceAnalysis","addChatMessage","message","sender","clearMessages","diffStateSlice","poseDifferences","highlightedJoints","diffVisualization","comparisonMode","showDifferenceHeatmap","jointAccuracyScores","updatePoseDifferences","highlightJoints","setVisualization","setComparisonMode","toggleHeatmap","updateJointScores","voiceControlSlice","isListening","lastCommand","recognition","voiceFeedbackEnabled","availableCommands","commandHistory","setListening","addCommand","command","executed","markCommandExecuted","toggleVoiceFeedback","setRecognition","initializeCedarStore","slices","poseActions","actions","aiCoachingActions","diffActions","voiceActions"],"sources":["/Users/anikaviswanathan/College/jiveMediaPipe/frontend/src/store/cedarStore.js"],"sourcesContent":["import { createStateSlice, setCedarStore } from 'cedar-os';\n\n// Cedar OS state slices for pose management\nexport const poseStateSlice = createStateSlice({\n  name: 'poseState',\n  initialState: {\n    currentPose: null,\n    referencePose: null,\n    similarity: 0,\n    score: 0,\n    isGameActive: false,\n    gameStartTime: null,\n    totalScore: 0,\n    poseHistory: [],\n    frameCount: 0\n  },\n  reducers: {\n    updateCurrentPose: (state, action) => {\n      state.currentPose = action.payload;\n      if (action.payload) {\n        state.poseHistory.push({\n          pose: action.payload,\n          timestamp: Date.now(),\n          frame: state.frameCount++\n        });\n        // Keep only last 100 poses for performance\n        if (state.poseHistory.length > 100) {\n          state.poseHistory = state.poseHistory.slice(-100);\n        }\n      }\n    },\n    updateReferencePose: (state, action) => {\n      state.referencePose = action.payload;\n    },\n    updateSimilarity: (state, action) => {\n      state.similarity = action.payload;\n    },\n    updateScore: (state, action) => {\n      state.score = action.payload;\n      state.totalScore += action.payload;\n    },\n    startGame: (state) => {\n      state.isGameActive = true;\n      state.gameStartTime = Date.now();\n      state.totalScore = 0;\n      state.poseHistory = [];\n      state.frameCount = 0;\n    },\n    endGame: (state) => {\n      state.isGameActive = false;\n    },\n    resetGame: (state) => {\n      state.currentPose = null;\n      state.referencePose = null;\n      state.similarity = 0;\n      state.score = 0;\n      state.isGameActive = false;\n      state.gameStartTime = null;\n      state.totalScore = 0;\n      state.poseHistory = [];\n      state.frameCount = 0;\n    }\n  }\n});\n\nexport const aiCoachingSlice = createStateSlice({\n  name: 'aiCoaching',\n  initialState: {\n    messages: [],\n    isTyping: false,\n    currentTip: null,\n    improvementSuggestions: [],\n    performanceAnalysis: null,\n    chatHistory: []\n  },\n  reducers: {\n    addMessage: (state, action) => {\n      state.messages.push({\n        id: Date.now(),\n        content: action.payload.content,\n        type: action.payload.type || 'info', // info, tip, warning, success\n        timestamp: Date.now()\n      });\n      // Keep last 50 messages\n      if (state.messages.length > 50) {\n        state.messages = state.messages.slice(-50);\n      }\n    },\n    setTyping: (state, action) => {\n      state.isTyping = action.payload;\n    },\n    updateCurrentTip: (state, action) => {\n      state.currentTip = action.payload;\n    },\n    addImprovementSuggestion: (state, action) => {\n      state.improvementSuggestions.push(action.payload);\n      // Keep last 10 suggestions\n      if (state.improvementSuggestions.length > 10) {\n        state.improvementSuggestions = state.improvementSuggestions.slice(-10);\n      }\n    },\n    updatePerformanceAnalysis: (state, action) => {\n      state.performanceAnalysis = action.payload;\n    },\n    addChatMessage: (state, action) => {\n      state.chatHistory.push({\n        id: Date.now(),\n        message: action.payload.message,\n        sender: action.payload.sender, // 'user' or 'ai'\n        timestamp: Date.now()\n      });\n    },\n    clearMessages: (state) => {\n      state.messages = [];\n      state.currentTip = null;\n    }\n  }\n});\n\nexport const diffStateSlice = createStateSlice({\n  name: 'diffState',\n  initialState: {\n    poseDifferences: [],\n    highlightedJoints: [],\n    diffVisualization: null,\n    comparisonMode: 'overlay', // 'overlay', 'sideBySide', 'diff'\n    showDifferenceHeatmap: true,\n    jointAccuracyScores: {}\n  },\n  reducers: {\n    updatePoseDifferences: (state, action) => {\n      state.poseDifferences = action.payload;\n    },\n    highlightJoints: (state, action) => {\n      state.highlightedJoints = action.payload;\n    },\n    setVisualization: (state, action) => {\n      state.diffVisualization = action.payload;\n    },\n    setComparisonMode: (state, action) => {\n      state.comparisonMode = action.payload;\n    },\n    toggleHeatmap: (state) => {\n      state.showDifferenceHeatmap = !state.showDifferenceHeatmap;\n    },\n    updateJointScores: (state, action) => {\n      state.jointAccuracyScores = action.payload;\n    }\n  }\n});\n\nexport const voiceControlSlice = createStateSlice({\n  name: 'voiceControl',\n  initialState: {\n    isListening: false,\n    lastCommand: null,\n    recognition: null,\n    voiceFeedbackEnabled: true,\n    availableCommands: [\n      'start game',\n      'pause game',\n      'resume game',\n      'reset game',\n      'show tips',\n      'hide tips',\n      'switch video',\n      'analyze performance'\n    ],\n    commandHistory: []\n  },\n  reducers: {\n    setListening: (state, action) => {\n      state.isListening = action.payload;\n    },\n    addCommand: (state, action) => {\n      state.lastCommand = action.payload;\n      state.commandHistory.push({\n        command: action.payload,\n        timestamp: Date.now(),\n        executed: false\n      });\n      // Keep last 20 commands\n      if (state.commandHistory.length > 20) {\n        state.commandHistory = state.commandHistory.slice(-20);\n      }\n    },\n    markCommandExecuted: (state) => {\n      if (state.commandHistory.length > 0) {\n        state.commandHistory[state.commandHistory.length - 1].executed = true;\n      }\n    },\n    toggleVoiceFeedback: (state) => {\n      state.voiceFeedbackEnabled = !state.voiceFeedbackEnabled;\n    },\n    setRecognition: (state, action) => {\n      // Note: We can't store the recognition object directly in state\n      // This would be handled in the component\n    }\n  }\n});\n\n// Initialize Cedar store with our slices\nexport const initializeCedarStore = () => {\n  setCedarStore({\n    slices: [\n      poseStateSlice,\n      aiCoachingSlice,\n      diffStateSlice,\n      voiceControlSlice\n    ]\n  });\n};\n\n// Export action creators for easy use\nexport const poseActions = poseStateSlice.actions;\nexport const aiCoachingActions = aiCoachingSlice.actions;\nexport const diffActions = diffStateSlice.actions;\nexport const voiceActions = voiceControlSlice.actions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}