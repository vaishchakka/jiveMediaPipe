{"ast":null,"code":"import { Extension, isNodeEmpty } from '@tiptap/core';\nimport { Plugin, PluginKey } from '@tiptap/pm/state';\nimport { Decoration, DecorationSet } from '@tiptap/pm/view';\n\n/**\n * This extension allows you to add a placeholder to your editor.\n * A placeholder is a text that appears when the editor or a node is empty.\n * @see https://www.tiptap.dev/api/extensions/placeholder\n */\nconst Placeholder = Extension.create({\n  name: 'placeholder',\n  addOptions() {\n    return {\n      emptyEditorClass: 'is-editor-empty',\n      emptyNodeClass: 'is-empty',\n      placeholder: 'Write something â€¦',\n      showOnlyWhenEditable: true,\n      showOnlyCurrent: true,\n      includeChildren: false\n    };\n  },\n  addProseMirrorPlugins() {\n    return [new Plugin({\n      key: new PluginKey('placeholder'),\n      props: {\n        decorations: ({\n          doc,\n          selection\n        }) => {\n          const active = this.editor.isEditable || !this.options.showOnlyWhenEditable;\n          const {\n            anchor\n          } = selection;\n          const decorations = [];\n          if (!active) {\n            return null;\n          }\n          const isEmptyDoc = this.editor.isEmpty;\n          doc.descendants((node, pos) => {\n            const hasAnchor = anchor >= pos && anchor <= pos + node.nodeSize;\n            const isEmpty = !node.isLeaf && isNodeEmpty(node);\n            if ((hasAnchor || !this.options.showOnlyCurrent) && isEmpty) {\n              const classes = [this.options.emptyNodeClass];\n              if (isEmptyDoc) {\n                classes.push(this.options.emptyEditorClass);\n              }\n              const decoration = Decoration.node(pos, pos + node.nodeSize, {\n                class: classes.join(' '),\n                'data-placeholder': typeof this.options.placeholder === 'function' ? this.options.placeholder({\n                  editor: this.editor,\n                  node,\n                  pos,\n                  hasAnchor\n                }) : this.options.placeholder\n              });\n              decorations.push(decoration);\n            }\n            return this.options.includeChildren;\n          });\n          return DecorationSet.create(doc, decorations);\n        }\n      }\n    })];\n  }\n});\nexport { Placeholder, Placeholder as default };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}