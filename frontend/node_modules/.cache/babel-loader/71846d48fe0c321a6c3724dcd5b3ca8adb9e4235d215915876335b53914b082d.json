{"ast":null,"code":"import { frame, cancelFrame } from '../frameloop/frame.mjs';\nimport { numberValueTypes } from '../value/types/maps/number.mjs';\nimport { getValueAsType } from '../value/types/utils/get-as-type.mjs';\nclass MotionValueState {\n  constructor() {\n    this.latest = {};\n    this.values = new Map();\n  }\n  set(name, value, render, computed, useDefaultValueType = true) {\n    const existingValue = this.values.get(name);\n    if (existingValue) {\n      existingValue.onRemove();\n    }\n    const onChange = () => {\n      const v = value.get();\n      if (useDefaultValueType) {\n        this.latest[name] = getValueAsType(v, numberValueTypes[name]);\n      } else {\n        this.latest[name] = v;\n      }\n      render && frame.render(render);\n    };\n    onChange();\n    const cancelOnChange = value.on(\"change\", onChange);\n    computed && value.addDependent(computed);\n    const remove = () => {\n      cancelOnChange();\n      render && cancelFrame(render);\n      this.values.delete(name);\n      computed && value.removeDependent(computed);\n    };\n    this.values.set(name, {\n      value,\n      onRemove: remove\n    });\n    return remove;\n  }\n  get(name) {\n    return this.values.get(name)?.value;\n  }\n  destroy() {\n    for (const value of this.values.values()) {\n      value.onRemove();\n    }\n  }\n}\nexport { MotionValueState };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}