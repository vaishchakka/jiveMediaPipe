{"ast":null,"code":"// src/xai-provider.ts\nimport { NoSuchModelError } from \"@ai-sdk/provider\";\nimport { OpenAICompatibleChatLanguageModel, OpenAICompatibleImageModel } from \"@ai-sdk/openai-compatible\";\nimport { loadApiKey, withoutTrailingSlash } from \"@ai-sdk/provider-utils\";\n\n// src/xai-chat-settings.ts\nfunction supportsStructuredOutputs(modelId) {\n  return [\"grok-3\", \"grok-3-beta\", \"grok-3-latest\", \"grok-3-fast\", \"grok-3-fast-beta\", \"grok-3-fast-latest\", \"grok-3-mini\", \"grok-3-mini-beta\", \"grok-3-mini-latest\", \"grok-3-mini-fast\", \"grok-3-mini-fast-beta\", \"grok-3-mini-fast-latest\", \"grok-2-1212\", \"grok-2-vision-1212\"].includes(modelId);\n}\n\n// src/xai-error.ts\nimport { z } from \"zod\";\nvar xaiErrorSchema = z.object({\n  code: z.string(),\n  error: z.string()\n});\n\n// src/xai-provider.ts\nvar xaiErrorStructure = {\n  errorSchema: xaiErrorSchema,\n  errorToMessage: data => data.error\n};\nfunction createXai(options = {}) {\n  var _a;\n  const baseURL = withoutTrailingSlash((_a = options.baseURL) != null ? _a : \"https://api.x.ai/v1\");\n  const getHeaders = () => ({\n    Authorization: `Bearer ${loadApiKey({\n      apiKey: options.apiKey,\n      environmentVariableName: \"XAI_API_KEY\",\n      description: \"xAI API key\"\n    })}`,\n    ...options.headers\n  });\n  const createLanguageModel = (modelId, settings = {}) => {\n    const structuredOutputs = supportsStructuredOutputs(modelId);\n    return new OpenAICompatibleChatLanguageModel(modelId, settings, {\n      provider: \"xai.chat\",\n      url: ({\n        path\n      }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      defaultObjectGenerationMode: structuredOutputs ? \"json\" : \"tool\",\n      errorStructure: xaiErrorStructure,\n      supportsStructuredOutputs: structuredOutputs,\n      includeUsage: true\n    });\n  };\n  const createImageModel = (modelId, settings = {}) => {\n    return new OpenAICompatibleImageModel(modelId, settings, {\n      provider: \"xai.image\",\n      url: ({\n        path\n      }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      errorStructure: xaiErrorStructure\n    });\n  };\n  const provider = (modelId, settings) => createLanguageModel(modelId, settings);\n  provider.languageModel = createLanguageModel;\n  provider.chat = createLanguageModel;\n  provider.textEmbeddingModel = modelId => {\n    throw new NoSuchModelError({\n      modelId,\n      modelType: \"textEmbeddingModel\"\n    });\n  };\n  provider.imageModel = createImageModel;\n  provider.image = createImageModel;\n  return provider;\n}\nvar xai = createXai();\nexport { createXai, xai };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}