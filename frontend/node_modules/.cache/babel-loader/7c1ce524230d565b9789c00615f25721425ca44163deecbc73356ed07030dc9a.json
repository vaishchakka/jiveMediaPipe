{"ast":null,"code":"\"use client\";\n\n// src/tabs.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { createRovingFocusGroupScope } from \"@radix-ui/react-roving-focus\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as RovingFocusGroup from \"@radix-ui/react-roving-focus\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { jsx } from \"react/jsx-runtime\";\nvar TABS_NAME = \"Tabs\";\nvar [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [createRovingFocusGroupScope]);\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);\nvar Tabs = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeTabs,\n    value: valueProp,\n    onValueChange,\n    defaultValue,\n    orientation = \"horizontal\",\n    dir,\n    activationMode = \"automatic\",\n    ...tabsProps\n  } = props;\n  const direction = useDirection(dir);\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    onChange: onValueChange,\n    defaultProp: defaultValue ?? \"\",\n    caller: TABS_NAME\n  });\n  return /* @__PURE__ */jsx(TabsProvider, {\n    scope: __scopeTabs,\n    baseId: useId(),\n    value,\n    onValueChange: setValue,\n    orientation,\n    dir: direction,\n    activationMode,\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      dir: direction,\n      \"data-orientation\": orientation,\n      ...tabsProps,\n      ref: forwardedRef\n    })\n  });\n});\nTabs.displayName = TABS_NAME;\nvar TAB_LIST_NAME = \"TabsList\";\nvar TabsList = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeTabs,\n    loop = true,\n    ...listProps\n  } = props;\n  const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);\n  return /* @__PURE__ */jsx(RovingFocusGroup.Root, {\n    asChild: true,\n    ...rovingFocusGroupScope,\n    orientation: context.orientation,\n    dir: context.dir,\n    loop,\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      role: \"tablist\",\n      \"aria-orientation\": context.orientation,\n      ...listProps,\n      ref: forwardedRef\n    })\n  });\n});\nTabsList.displayName = TAB_LIST_NAME;\nvar TRIGGER_NAME = \"TabsTrigger\";\nvar TabsTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeTabs,\n    value,\n    disabled = false,\n    ...triggerProps\n  } = props;\n  const context = useTabsContext(TRIGGER_NAME, __scopeTabs);\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);\n  const triggerId = makeTriggerId(context.baseId, value);\n  const contentId = makeContentId(context.baseId, value);\n  const isSelected = value === context.value;\n  return /* @__PURE__ */jsx(RovingFocusGroup.Item, {\n    asChild: true,\n    ...rovingFocusGroupScope,\n    focusable: !disabled,\n    active: isSelected,\n    children: /* @__PURE__ */jsx(Primitive.button, {\n      type: \"button\",\n      role: \"tab\",\n      \"aria-selected\": isSelected,\n      \"aria-controls\": contentId,\n      \"data-state\": isSelected ? \"active\" : \"inactive\",\n      \"data-disabled\": disabled ? \"\" : void 0,\n      disabled,\n      id: triggerId,\n      ...triggerProps,\n      ref: forwardedRef,\n      onMouseDown: composeEventHandlers(props.onMouseDown, event => {\n        if (!disabled && event.button === 0 && event.ctrlKey === false) {\n          context.onValueChange(value);\n        } else {\n          event.preventDefault();\n        }\n      }),\n      onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n        if ([\" \", \"Enter\"].includes(event.key)) context.onValueChange(value);\n      }),\n      onFocus: composeEventHandlers(props.onFocus, () => {\n        const isAutomaticActivation = context.activationMode !== \"manual\";\n        if (!isSelected && !disabled && isAutomaticActivation) {\n          context.onValueChange(value);\n        }\n      })\n    })\n  });\n});\nTabsTrigger.displayName = TRIGGER_NAME;\nvar CONTENT_NAME = \"TabsContent\";\nvar TabsContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeTabs,\n    value,\n    forceMount,\n    children,\n    ...contentProps\n  } = props;\n  const context = useTabsContext(CONTENT_NAME, __scopeTabs);\n  const triggerId = makeTriggerId(context.baseId, value);\n  const contentId = makeContentId(context.baseId, value);\n  const isSelected = value === context.value;\n  const isMountAnimationPreventedRef = React.useRef(isSelected);\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || isSelected,\n    children: ({\n      present\n    }) => /* @__PURE__ */jsx(Primitive.div, {\n      \"data-state\": isSelected ? \"active\" : \"inactive\",\n      \"data-orientation\": context.orientation,\n      role: \"tabpanel\",\n      \"aria-labelledby\": triggerId,\n      hidden: !present,\n      id: contentId,\n      tabIndex: 0,\n      ...contentProps,\n      ref: forwardedRef,\n      style: {\n        ...props.style,\n        animationDuration: isMountAnimationPreventedRef.current ? \"0s\" : void 0\n      },\n      children: present && children\n    })\n  });\n});\nTabsContent.displayName = CONTENT_NAME;\nfunction makeTriggerId(baseId, value) {\n  return `${baseId}-trigger-${value}`;\n}\nfunction makeContentId(baseId, value) {\n  return `${baseId}-content-${value}`;\n}\nvar Root2 = Tabs;\nvar List = TabsList;\nvar Trigger = TabsTrigger;\nvar Content = TabsContent;\nexport { Content, List, Root2 as Root, Tabs, TabsContent, TabsList, TabsTrigger, Trigger, createTabsScope };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}