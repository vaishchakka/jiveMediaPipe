{"ast":null,"code":"import { isCSSVar } from '../../render/dom/is-css-var.mjs';\nimport { transformProps } from '../../render/utils/keys-transform.mjs';\nimport { isHTMLElement } from '../../utils/is-html-element.mjs';\nimport { MotionValue } from '../../value/index.mjs';\nimport { createSelectorEffect } from '../utils/create-dom-effect.mjs';\nimport { createEffect } from '../utils/create-effect.mjs';\nimport { buildTransform } from './transform.mjs';\nconst originProps = new Set([\"originX\", \"originY\", \"originZ\"]);\nconst addStyleValue = (element, state, key, value) => {\n  let render = undefined;\n  let computed = undefined;\n  if (transformProps.has(key)) {\n    if (!state.get(\"transform\")) {\n      // If this is an HTML element, we need to set the transform-box to fill-box\n      // to normalise the transform relative to the element's bounding box\n      if (!isHTMLElement(element) && !state.get(\"transformBox\")) {\n        addStyleValue(element, state, \"transformBox\", new MotionValue(\"fill-box\"));\n      }\n      state.set(\"transform\", new MotionValue(\"none\"), () => {\n        element.style.transform = buildTransform(state);\n      });\n    }\n    computed = state.get(\"transform\");\n  } else if (originProps.has(key)) {\n    if (!state.get(\"transformOrigin\")) {\n      state.set(\"transformOrigin\", new MotionValue(\"\"), () => {\n        const originX = state.latest.originX ?? \"50%\";\n        const originY = state.latest.originY ?? \"50%\";\n        const originZ = state.latest.originZ ?? 0;\n        element.style.transformOrigin = `${originX} ${originY} ${originZ}`;\n      });\n    }\n    computed = state.get(\"transformOrigin\");\n  } else if (isCSSVar(key)) {\n    render = () => {\n      element.style.setProperty(key, state.latest[key]);\n    };\n  } else {\n    render = () => {\n      element.style[key] = state.latest[key];\n    };\n  }\n  return state.set(key, value, render, computed);\n};\nconst styleEffect = /*@__PURE__*/createSelectorEffect(/*@__PURE__*/createEffect(addStyleValue));\nexport { addStyleValue, styleEffect };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}