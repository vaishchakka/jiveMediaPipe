import { ZodSchema, z } from 'zod';
import { B as BasicStateValue, aK as BaseSetter, S as Setter } from '../../index-XdHpD8cC.mjs';
import 'zustand';
import '../agentContext/AgentContextTypes.mjs';
import 'react';
import '@tiptap/core';
import '../spellSlice/SpellTypes.mjs';
import 'fast-json-patch';
import '../toolsSlice/ToolsTypes.mjs';

/**
 * Hook that registers and returns a piece of state from the Cedar store,
 * working like React's useState but persisting to the global state slice.
 *
 * @param config Configuration object for the state registration and management
 * @param config.key Unique key for the state in the store
 * @param config.initialValue Initial value for the state
 * @param config.description Optional human-readable description for AI metadata
 * @param config.stateSetters Optional state setter functions for this state
 * @param config.customSetters Optional custom setter functions for this state (deprecated)
 * @param config.schema Optional Zod schema for validating the state
 * @returns [state, setState] tuple.
 */
declare function useCedarState<T extends BasicStateValue>(config: {
    key: string;
    initialValue: T;
    description?: string;
    stateSetters?: Record<string, Setter<T, z.ZodTypeAny>>;
    /** @deprecated Use stateSetters instead */
    customSetters?: Record<string, Setter<T, z.ZodTypeAny>>;
    schema?: ZodSchema<T>;
}): [T, (newValue: T) => void];
/**
 * Hook that registers a state in the Cedar store.
 * This is a hook version of registerState that handles the useEffect internally,
 * allowing you to call it directly in the component body without worrying about
 * state updates during render.
 *
 * @param config Configuration object for the state registration
 * @param config.key Unique key for the state in the store
 * @param config.value Current value for the state
 * @param config.setValue Optional React setState function for external state syncing
 * @param config.description Optional human-readable description for AI metadata
 * @param config.customSetters Optional custom setter functions for this state (deprecated)
 * @param config.schema Optional Zod schema for validating the state
 */
declare function useRegisterState<T extends BasicStateValue>(config: {
    key: string;
    value: T;
    setValue?: BaseSetter<T>;
    description?: string;
    schema?: ZodSchema<T>;
    stateSetters?: Record<string, Setter<T, z.ZodTypeAny>>;
    /** @deprecated Use stateSetters instead */
    customSetters?: Record<string, Setter<T, z.ZodTypeAny>>;
}): void;

export { useCedarState, useRegisterState };
