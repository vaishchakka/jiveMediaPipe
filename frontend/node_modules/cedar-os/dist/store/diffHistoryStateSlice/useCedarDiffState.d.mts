import { ZodSchema } from 'zod';
import { B as BasicStateValue, at as DiffMode, S as Setter, au as DiffState } from '../../index-XdHpD8cC.mjs';
import 'zustand';
import '../agentContext/AgentContextTypes.mjs';
import 'react';
import '@tiptap/core';
import '../spellSlice/SpellTypes.mjs';
import 'fast-json-patch';
import '../toolsSlice/ToolsTypes.mjs';

/**
 * Hook that registers and returns a piece of state from the Cedar store with diff management,
 * working as a superset of useCedarState but with diff tracking and history.
 *
 * @param key Unique key for the state in the store.
 * @param initialValue Initial value for the state.
 * @param diffMode Mode for handling diffs: 'defaultAccept' or 'holdAccept'.
 * @param description Optional human-readable description for AI metadata.
 * @param customSetters Optional custom setter functions for this state.
 * @param schema Optional Zod schema for validating the state.
 * @returns [cleanState, setState, diffState] tuple.
 */
declare function useCedarDiffState<T extends BasicStateValue>(key: string, initialValue: T, diffMode: DiffMode, description?: string, customSetters?: Record<string, Setter<T>>, schema?: ZodSchema<T>): [T, (newValue: T) => void, DiffState<T> | undefined];

export { useCedarDiffState };
