import { B as BasicStateValue, ax as RegisterDiffStateConfig, aL as DiffChecker } from '../../index-XdHpD8cC.mjs';
import 'zustand';
import 'zod';
import '../agentContext/AgentContextTypes.mjs';
import 'react';
import '@tiptap/core';
import '../spellSlice/SpellTypes.mjs';
import 'fast-json-patch';
import '../toolsSlice/ToolsTypes.mjs';

/**
 * Return type for registerDiffState
 */
interface DiffStateReturn {
    undo: () => boolean;
    redo: () => boolean;
    acceptAllDiffs: () => boolean;
    rejectAllDiffs: () => boolean;
}
/**
 * Utility function to add diff markers to array objects
 * Compares arrays and adds 'diff' field to objects based on changes
 * @param oldState - The previous state array
 * @param newState - The new state array
 * @param idField - The field to use as unique identifier (default: 'id')
 * @param diffPath - JSON path where to add the diff field (default: '' for root level, '/data' for nested)
 * @param diffChecker - Optional configuration for selective diff checking
 */
declare function addDiffToArrayObjs<T extends Record<string, any>>(oldState: T[], newState: T[], idField?: string, diffPath?: string, diffChecker?: DiffChecker): any[];
/**
 * Utility function to handle diff computation for primitive arrays
 * Unlike addDiffToArrayObjs, this doesn't add diff markers to individual items
 * since primitive values can't have additional properties
 * @param oldState - The previous state array of primitives
 * @param newState - The new state array of primitives
 */
declare function addDiffToPrimitiveArray<T extends string | number | boolean>(oldState: T[], newState: T[]): T[];
/**
 * Utility function to add diff markers to Record objects
 * Compares Records and adds 'diff' field to values based on changes
 * @param oldState - The previous state Record
 * @param newState - The new state Record
 * @param diffPath - JSON path where to add the diff field (default: '' for root level, '/data' for nested)
 * @param diffChecker - Optional configuration for selective diff checking
 */
declare function addDiffToMapObj<V extends Record<string, unknown>>(oldState: Record<string, V>, newState: Record<string, V>, diffPath?: string, diffChecker?: DiffChecker): Record<string, V>;
/**
 * Hook version of registerDiffState for use in React components
 * Sets up diff tracking for a state without overriding setters.
 * The diffHistorySlice will automatically propagate changes to stateSlice.
 *
 * @example
 * ```typescript
 * // For React Flow nodes, add diff markers to the data property
 * const nodesDiff = useRegisterDiffState({
 *   key: 'nodes',
 *   value: nodes,
 *   setValue: setNodes,
 *   description: 'Product roadmap nodes',
 *   computeState: (oldState, newState) => {
 *     return addDiffToArrayObjs(oldState, newState, 'id', '/data');
 *   },
 *   stateSetters: {
 *     addNode: {
 *       name: 'addNode',
 *       description: 'Add a new node',
 *       parameters: [{ name: 'node', type: 'Node', description: 'Node to add' }],
 *       execute: (currentNodes, node) => {
 *         setNodes([...currentNodes, node]); // Diff tracking happens automatically
 *       }
 *     }
 *   }
 * });
 *
 * // Access the computed state and diff operations
 * const { computedState, undo, redo, acceptAllDiffs, rejectAllDiffs } = nodesDiff;
 * ```
 */
declare function useRegisterDiffState<T extends BasicStateValue>(config: RegisterDiffStateConfig<T>): void;

export { type DiffStateReturn, RegisterDiffStateConfig, addDiffToArrayObjs, addDiffToMapObj, addDiffToPrimitiveArray, useRegisterDiffState };
