import * as zustand_middleware from 'zustand/middleware';
import * as zustand from 'zustand';
import { StateCreator } from 'zustand';
import { P as CedarStore } from '../index-XdHpD8cC.mjs';
import 'zod';
import './agentContext/AgentContextTypes.mjs';
import 'react';
import '@tiptap/core';
import './spellSlice/SpellTypes.mjs';
import 'fast-json-patch';
import './toolsSlice/ToolsTypes.mjs';

type ExtractState<S> = S extends StateCreator<infer T, any, any, any> ? T : never;
type MergeSlices<T extends readonly StateCreator<any, any, any, any>[]> = T extends readonly [
    ...infer Rest extends StateCreator<any, any, any, any>[],
    infer Last extends StateCreator<any, any, any, any>
] ? ExtractState<Last> & MergeSlices<Rest> : {};
interface CreateCedarStoreOptions<TSlices extends readonly StateCreator<CedarStore, [], [], unknown>[] = []> {
    extend?: TSlices;
    persistOptions?: {
        name?: string;
        partialize?: (state: CedarStore) => Partial<CedarStore>;
    };
}
declare function createCedarStore<TSlices extends readonly StateCreator<any, any, any, any>[] = []>(options?: CreateCedarStoreOptions<TSlices>): zustand.UseBoundStore<Omit<zustand.StoreApi<CedarStore & MergeSlices<TSlices>>, "persist"> & {
    persist: {
        setOptions: (options: Partial<zustand_middleware.PersistOptions<CedarStore & MergeSlices<TSlices>, Partial<CedarStore>>>) => void;
        clearStorage: () => void;
        rehydrate: () => Promise<void> | void;
        hasHydrated: () => boolean;
        onHydrate: (fn: (state: CedarStore & MergeSlices<TSlices>) => void) => () => void;
        onFinishHydration: (fn: (state: CedarStore & MergeSlices<TSlices>) => void) => () => void;
        getOptions: () => Partial<zustand_middleware.PersistOptions<CedarStore & MergeSlices<TSlices>, Partial<CedarStore>>>;
    };
}>;
declare const createDefaultCedarStore: () => zustand.UseBoundStore<Omit<zustand.StoreApi<CedarStore>, "persist"> & {
    persist: {
        setOptions: (options: Partial<zustand_middleware.PersistOptions<CedarStore, Partial<CedarStore>>>) => void;
        clearStorage: () => void;
        rehydrate: () => Promise<void> | void;
        hasHydrated: () => boolean;
        onHydrate: (fn: (state: CedarStore) => void) => () => void;
        onFinishHydration: (fn: (state: CedarStore) => void) => () => void;
        getOptions: () => Partial<zustand_middleware.PersistOptions<CedarStore, Partial<CedarStore>>>;
    };
}>;

export { type CreateCedarStoreOptions, createCedarStore, createDefaultCedarStore };
