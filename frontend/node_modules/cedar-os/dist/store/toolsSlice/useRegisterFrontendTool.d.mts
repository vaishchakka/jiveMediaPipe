import { z } from 'zod';
import { ToolFunction } from './ToolsTypes.mjs';

interface UseRegisterFrontendToolOptions<TArgs> {
    name: string;
    execute: ToolFunction<TArgs>;
    argsSchema: z.ZodSchema<TArgs>;
    description?: string;
    enabled?: boolean;
}
/**
 * Hook to register a frontend tool that can be called by the agent.
 * The tool is automatically registered when the component mounts and
 * unregistered when it unmounts.
 *
 * @example
 * ```tsx
 * const MyComponent = () => {
 *   useRegisterFrontendTool({
 *     name: 'showNotification',
 *     execute: ({ message, type }) => {
 *       toast[type](message);
 *     },
 *     argsSchema: z.object({
 *       message: z.string(),
 *       type: z.enum(['success', 'error', 'info']),
 *     }),
 *     description: 'Shows a notification to the user',
 *   });
 *
 *   return <div>Component with registered tool</div>;
 * };
 * ```
 */
declare function useRegisterFrontendTool<TArgs>(options: UseRegisterFrontendToolOptions<TArgs>): {
    unregister: () => void;
};

export { type UseRegisterFrontendToolOptions, useRegisterFrontendTool };
