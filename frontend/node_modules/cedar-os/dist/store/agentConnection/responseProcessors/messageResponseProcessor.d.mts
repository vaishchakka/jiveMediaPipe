import { z } from 'zod';
import { a7 as ResponseProcessor, a5 as CustomStructuredResponseType } from '../../../index-XdHpD8cC.mjs';
import 'zustand';
import '../../agentContext/AgentContextTypes.mjs';
import 'react';
import '@tiptap/core';
import '../../spellSlice/SpellTypes.mjs';
import 'fast-json-patch';
import '../../toolsSlice/ToolsTypes.mjs';

type BackendMessageResponse = CustomStructuredResponseType<'message', {
    role?: 'user' | 'assistant' | 'bot';
    content: string;
}>;
declare const messageResponseProcessor: ResponseProcessor<BackendMessageResponse>;
/**
 * Zod schema for BackendMessageResponse
 */
declare const BackendMessageResponseSchema: z.ZodIntersection<z.ZodObject<{
    type: z.ZodLiteral<"message">;
    content: z.ZodOptional<z.ZodString>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    type: z.ZodLiteral<"message">;
    content: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    type: z.ZodLiteral<"message">;
    content: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    role: z.ZodOptional<z.ZodEnum<["user", "assistant", "bot"]>>;
    content: z.ZodString;
}, "strip", z.ZodTypeAny, {
    content: string;
    role?: "bot" | "user" | "assistant" | undefined;
}, {
    content: string;
    role?: "bot" | "user" | "assistant" | undefined;
}>>;

export { type BackendMessageResponse, BackendMessageResponseSchema, messageResponseProcessor };
