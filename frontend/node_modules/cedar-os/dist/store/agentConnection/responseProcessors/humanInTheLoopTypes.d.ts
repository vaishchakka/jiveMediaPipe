import { z } from 'zod';
import { a5 as CustomStructuredResponseType, n as CustomMessage } from '../../../index-DGEVvAGh.js';
import 'zustand';
import '../../agentContext/AgentContextTypes.js';
import 'react';
import '@tiptap/core';
import '../../spellSlice/SpellTypes.js';
import 'fast-json-patch';
import '../../toolsSlice/ToolsTypes.js';

/**
 * Base human-in-the-loop response type matching Mastra's suspend response
 */
type HumanInTheLoopResponse<SuspendPayload = Record<string, unknown>> = CustomStructuredResponseType<'humanInTheLoop', {
    status: 'suspended';
    runId: string;
    stepPath: [string[], ...string[][]];
    suspendPayload?: SuspendPayload;
    message?: string;
    timeoutMs?: number;
    metadata?: Record<string, unknown>;
}>;
/**
 * Human-in-the-loop message type for UI rendering
 */
type HumanInTheLoopMessage<SuspendPayload = Record<string, unknown>, ResumeData = Record<string, unknown>> = CustomMessage<'humanInTheLoop', {
    state: 'suspended' | 'resumed' | 'cancelled' | 'timeout';
    runId: string;
    stepPath: [string[], ...string[][]];
    suspendPayload?: SuspendPayload;
    resumeData?: ResumeData;
    message?: string;
    resumeCallback?: (data: ResumeData) => Promise<void>;
    cancelCallback?: () => Promise<void>;
    resumedAt?: string;
    cancelledAt?: string;
    metadata?: Record<string, unknown>;
}>;
/**
 * State shape for suspend/resume data - single state key for all workflows
 */
interface HumanInTheLoopState<SuspendPayload = Record<string, unknown>, ResumeData = Record<string, unknown>> {
    [runId: string]: {
        runId: string;
        stepPath: [string[], ...string[][]];
        suspendPayload: SuspendPayload;
        suspendedAt: string;
        state: 'suspended' | 'resumed' | 'cancelled' | 'timeout';
        resumeData?: ResumeData;
        resumedAt?: string;
        cancelledAt?: string;
        threadId?: string;
        messageId: string;
    };
}
/**
 * Zod schema for HumanInTheLoopResponse
 */
declare const HumanInTheLoopResponseSchema: z.ZodIntersection<z.ZodObject<{
    type: z.ZodLiteral<"humanInTheLoop">;
    content: z.ZodOptional<z.ZodString>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    type: z.ZodLiteral<"humanInTheLoop">;
    content: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    type: z.ZodLiteral<"humanInTheLoop">;
    content: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    status: z.ZodLiteral<"suspended">;
    runId: z.ZodString;
    stepPath: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    suspendPayload: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    message: z.ZodOptional<z.ZodString>;
    timeoutMs: z.ZodOptional<z.ZodNumber>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "strip", z.ZodTypeAny, {
    status: "suspended";
    runId: string;
    stepPath: string[][];
    message?: string | undefined;
    metadata?: Record<string, unknown> | undefined;
    suspendPayload?: Record<string, unknown> | undefined;
    timeoutMs?: number | undefined;
}, {
    status: "suspended";
    runId: string;
    stepPath: string[][];
    message?: string | undefined;
    metadata?: Record<string, unknown> | undefined;
    suspendPayload?: Record<string, unknown> | undefined;
    timeoutMs?: number | undefined;
}>>;

export { type HumanInTheLoopMessage, type HumanInTheLoopResponse, HumanInTheLoopResponseSchema, type HumanInTheLoopState };
