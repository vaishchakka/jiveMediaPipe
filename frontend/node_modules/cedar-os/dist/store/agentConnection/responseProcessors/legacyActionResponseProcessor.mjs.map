{"version":3,"sources":["../../../../src/store/agentConnection/responseProcessors/legacyActionResponseProcessor.ts"],"sourcesContent":["import { ResponseProcessor } from '@/store/agentConnection/AgentConnectionTypes';\nimport { LegacyActionResponse } from '@/store/agentConnection/responseProcessors/createResponseProcessor';\nimport { MessageInput } from '@/store/messages/MessageTypes';\n\n// Legacy action response processor - backwards compatibility for 'action' type\n// This handles the old 'action' type the same way as 'setState' for backwards compatibility\nexport const legacyActionResponseProcessor: ResponseProcessor<LegacyActionResponse> =\n\t{\n\t\ttype: 'action' as const,\n\t\tnamespace: 'default',\n\t\texecute: async (obj, store) => {\n\t\t\tconst args = 'args' in obj && Array.isArray(obj.args) ? obj.args : [];\n\t\t\t// Pass options with isDiff set to true for action responses\n\t\t\tstore.executeStateSetter({\n\t\t\t\tkey: obj.stateKey,\n\t\t\t\tsetterKey: obj.setterKey,\n\t\t\t\toptions: { isDiff: true },\n\t\t\t\targs,\n\t\t\t});\n\t\t\tstore.addMessage(obj as unknown as MessageInput);\n\t\t},\n\t\tvalidate: (obj): obj is LegacyActionResponse =>\n\t\t\tobj.type === 'action' &&\n\t\t\t'stateKey' in obj &&\n\t\t\t'setterKey' in obj &&\n\t\t\ttypeof obj.stateKey === 'string' &&\n\t\t\ttypeof obj.setterKey === 'string',\n\t};\n"],"mappings":";AAMO,IAAM,gCACZ;AAAA,EACC,MAAM;AAAA,EACN,WAAW;AAAA,EACX,SAAS,OAAO,KAAK,UAAU;AAC9B,UAAM,OAAO,UAAU,OAAO,MAAM,QAAQ,IAAI,IAAI,IAAI,IAAI,OAAO,CAAC;AAEpE,UAAM,mBAAmB;AAAA,MACxB,KAAK,IAAI;AAAA,MACT,WAAW,IAAI;AAAA,MACf,SAAS,EAAE,QAAQ,KAAK;AAAA,MACxB;AAAA,IACD,CAAC;AACD,UAAM,WAAW,GAA8B;AAAA,EAChD;AAAA,EACA,UAAU,CAAC,QACV,IAAI,SAAS,YACb,cAAc,OACd,eAAe,OACf,OAAO,IAAI,aAAa,YACxB,OAAO,IAAI,cAAc;AAC3B;","names":[]}