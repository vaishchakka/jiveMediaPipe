import { a7 as ResponseProcessor, P as CedarStore } from '../../../index-DGEVvAGh.js';
import { z } from 'zod';
import 'zustand';
import '../../agentContext/AgentContextTypes.js';
import 'react';
import '@tiptap/core';
import '../../spellSlice/SpellTypes.js';
import 'fast-json-patch';
import '../../toolsSlice/ToolsTypes.js';

declare const FrontendToolResponseSchema: z.ZodObject<{
    type: z.ZodLiteral<"frontendTool">;
    toolName: z.ZodString;
    args: z.ZodUnknown;
}, "strip", z.ZodTypeAny, {
    type: "frontendTool";
    toolName: string;
    args?: unknown;
}, {
    type: "frontendTool";
    toolName: string;
    args?: unknown;
}>;
type FrontendToolResponse = z.infer<typeof FrontendToolResponseSchema>;
declare const frontendToolResponseProcessor: ResponseProcessor<FrontendToolResponse>;
type FrontendToolResponseFor<ToolName extends string, Args = unknown> = {
    type: 'frontendTool';
    toolName: ToolName;
    args: Args;
};
declare function createFrontendToolResponseProcessor<T extends FrontendToolResponse>(config: {
    namespace?: string;
    toolName?: string;
    beforeExecute?: (obj: T, store: CedarStore) => Promise<void> | void;
    afterExecute?: (obj: T, store: CedarStore) => Promise<void> | void;
}): ResponseProcessor<T>;

export { type FrontendToolResponse, type FrontendToolResponseFor, FrontendToolResponseSchema, createFrontendToolResponseProcessor, frontendToolResponseProcessor };
