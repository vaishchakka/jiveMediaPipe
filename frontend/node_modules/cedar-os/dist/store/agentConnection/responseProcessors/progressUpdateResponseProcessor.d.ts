import { a5 as CustomStructuredResponseType, a7 as ResponseProcessor, a6 as StructuredResponseType } from '../../../index-DGEVvAGh.js';
import { z } from 'zod';
import 'zustand';
import '../../agentContext/AgentContextTypes.js';
import 'react';
import '@tiptap/core';
import '../../spellSlice/SpellTypes.js';
import 'fast-json-patch';
import '../../toolsSlice/ToolsTypes.js';

type ProgressUpdateResponsePayload = {
    type: 'progress_update';
    state: 'in_progress' | 'complete' | 'error';
    text: string;
};
type ProgressUpdateResponse = CustomStructuredResponseType<'progress_update', ProgressUpdateResponsePayload>;
declare const progressUpdateResponseProcessor: ResponseProcessor<StructuredResponseType>;
/**
 * Zod schema for ProgressUpdateResponse
 */
declare const ProgressUpdateResponseSchema: z.ZodIntersection<z.ZodObject<{
    type: z.ZodLiteral<"progress_update">;
    content: z.ZodOptional<z.ZodString>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    type: z.ZodLiteral<"progress_update">;
    content: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    type: z.ZodLiteral<"progress_update">;
    content: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    state: z.ZodEnum<["in_progress", "complete", "error"]>;
    text: z.ZodString;
}, "strip", z.ZodTypeAny, {
    text: string;
    state: "in_progress" | "complete" | "error";
}, {
    text: string;
    state: "in_progress" | "complete" | "error";
}>>;

export { type ProgressUpdateResponse, type ProgressUpdateResponsePayload, ProgressUpdateResponseSchema, progressUpdateResponseProcessor };
