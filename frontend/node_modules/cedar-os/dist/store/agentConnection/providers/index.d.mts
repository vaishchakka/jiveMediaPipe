import { AISDKProviderImplementation } from './ai-sdk.mjs';
import { aM as ProviderImplementation, _ as OpenAIParams, Z as MastraParams, V as CustomParams, aT as CustomProviderConfig, $ as ProviderConfig } from '../../../index-XdHpD8cC.mjs';
import 'zustand';
import 'zod';
import '../../agentContext/AgentContextTypes.mjs';
import 'react';
import '@tiptap/core';
import '../../spellSlice/SpellTypes.mjs';
import 'fast-json-patch';
import '../../toolsSlice/ToolsTypes.mjs';

declare const providerRegistry: {
    readonly openai: ProviderImplementation<OpenAIParams, {
        provider: "openai";
        apiKey: string;
    }>;
    readonly anthropic: ProviderImplementation<OpenAIParams, {
        provider: "openai";
        apiKey: string;
    }>;
    readonly mastra: ProviderImplementation<MastraParams, {
        provider: "mastra";
        apiKey?: string;
        baseURL: string;
        chatPath?: string;
        voiceRoute?: string;
        resumePath?: string;
    }>;
    readonly 'ai-sdk': AISDKProviderImplementation;
    readonly custom: ProviderImplementation<CustomParams, {
        provider: "custom";
        config: CustomProviderConfig;
    }>;
};
type ProviderRegistry = typeof providerRegistry;
declare function getProviderImplementation<T extends ProviderConfig>(config: T): ProviderRegistry[T['provider']];

export { type ProviderRegistry, getProviderImplementation, providerRegistry };
