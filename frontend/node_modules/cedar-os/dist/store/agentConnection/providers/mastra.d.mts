import { aM as ProviderImplementation, Z as MastraParams, aN as InferProviderConfig } from '../../../index-XdHpD8cC.mjs';
import 'zustand';
import 'zod';
import '../../agentContext/AgentContextTypes.mjs';
import 'react';
import '@tiptap/core';
import '../../spellSlice/SpellTypes.mjs';
import 'fast-json-patch';
import '../../toolsSlice/ToolsTypes.mjs';

type MastraConfig = InferProviderConfig<'mastra'>;
declare const mastraProvider: ProviderImplementation<MastraParams, MastraConfig>;
/**
 * All event types emitted by a Mastra agent stream.
 */
type MastraStreamedResponseType = 'start' | 'step-start' | 'tool-call' | 'tool-result' | 'step-finish' | 'tool-output' | 'step-result' | 'step-output' | 'finish';
/**
 * Strongly-typed wrapper around a Mastra structured response message.
 * Extends Cedar's `CustomMessage` so it is compatible with the message system.
 */
type MastraStreamedResponse<T extends MastraStreamedResponseType = MastraStreamedResponseType> = {
    type: T;
    runId: string;
    from: string;
    payload: Record<string, unknown>;
};

export { type MastraStreamedResponse, type MastraStreamedResponseType, mastraProvider };
