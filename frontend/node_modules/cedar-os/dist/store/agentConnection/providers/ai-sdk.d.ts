import { Q as AISDKParams, aN as InferProviderConfig, Y as LLMResponse, aP as AISDKStructuredParams, a1 as StreamHandler, a2 as StreamResponse, aQ as VoiceParams, aR as VoiceLLMResponse, aS as VoiceStreamHandler } from '../../../index-DGEVvAGh.js';
import 'zustand';
import 'zod';
import '../../agentContext/AgentContextTypes.js';
import 'react';
import '@tiptap/core';
import '../../spellSlice/SpellTypes.js';
import 'fast-json-patch';
import '../../toolsSlice/ToolsTypes.js';

type AISDKConfig = InferProviderConfig<'ai-sdk'>;
interface AISDKProviderImplementation {
    callLLM: (params: AISDKParams, config: AISDKConfig) => Promise<LLMResponse>;
    callLLMStructured: (params: AISDKStructuredParams, config: AISDKConfig) => Promise<LLMResponse>;
    streamLLM: (params: AISDKParams, config: AISDKConfig, handler: StreamHandler) => StreamResponse;
    voiceLLM: (params: VoiceParams, config: AISDKConfig) => Promise<VoiceLLMResponse>;
    voiceStreamLLM?: (params: VoiceParams, config: AISDKConfig, handler: VoiceStreamHandler) => StreamResponse;
    handleResponse: (response: Response) => Promise<LLMResponse>;
}
declare const aiSDKProvider: AISDKProviderImplementation;

export { type AISDKProviderImplementation, aiSDKProvider };
