// src/store/agentConnection/providers/custom.ts
var customProvider = {
  callLLM: async (params, config) => {
    if (config.config.callLLM) {
      return await config.config.callLLM(params, config);
    }
    throw new Error("Custom provider requires a callLLM function in config");
  },
  callLLMStructured: async (params, config) => {
    if (config.config.callLLMStructured) {
      return await config.config.callLLMStructured(params, config);
    }
    if (config.config.callLLM) {
      return await config.config.callLLM(params, config);
    }
    throw new Error(
      "Custom provider requires a callLLMStructured function or callLLM function in config"
    );
  },
  streamLLM: (params, config, handler) => {
    if (config.config.streamLLM) {
      return config.config.streamLLM(params, config, handler);
    }
    if (config.config.callLLM) {
      const abortController = new AbortController();
      const completion = (async () => {
        try {
          const response = await config.config.callLLM(params, config);
          handler({ type: "chunk", content: response.content || "" });
          handler({ type: "done", completedItems: [response.content || ""] });
        } catch (error) {
          handler({ type: "error", error });
        }
      })();
      return {
        abort: () => abortController.abort(),
        completion
      };
    }
    throw new Error(
      "Custom provider requires a streamLLM function or callLLM function in config"
    );
  },
  voiceLLM: async (params, config) => {
    if (config.config.voiceLLM) {
      return await config.config.voiceLLM(params, config);
    }
    return {
      content: ""
    };
  },
  handleResponse: async (response) => {
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    return {
      content: data.content || data.message || "",
      usage: data.usage,
      metadata: data.metadata || {}
    };
  }
};
export {
  customProvider
};
//# sourceMappingURL=custom.mjs.map