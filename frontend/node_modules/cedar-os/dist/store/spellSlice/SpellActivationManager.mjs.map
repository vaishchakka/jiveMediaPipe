{"version":3,"sources":["../../../src/store/spellSlice/SpellTypes.ts","../../../src/store/spellSlice/SpellActivationManager.ts"],"sourcesContent":["// Hotkey definitions\nexport enum Hotkey {\n\t// Single keys\n\tA = 'a',\n\tB = 'b',\n\tC = 'c',\n\tD = 'd',\n\tE = 'e',\n\tF = 'f',\n\tG = 'g',\n\tH = 'h',\n\tI = 'i',\n\tJ = 'j',\n\tK = 'k',\n\tL = 'l',\n\tM = 'm',\n\tN = 'n',\n\tO = 'o',\n\tP = 'p',\n\tQ = 'q',\n\tR = 'r',\n\tS = 's',\n\tT = 't',\n\tU = 'u',\n\tV = 'v',\n\tW = 'w',\n\tX = 'x',\n\tY = 'y',\n\tZ = 'z',\n\n\t// Function keys\n\tF1 = 'f1',\n\tF2 = 'f2',\n\tF3 = 'f3',\n\tF4 = 'f4',\n\tF5 = 'f5',\n\tF6 = 'f6',\n\tF7 = 'f7',\n\tF8 = 'f8',\n\tF9 = 'f9',\n\tF10 = 'f10',\n\tF11 = 'f11',\n\tF12 = 'f12',\n\n\t// Special keys\n\tESCAPE = 'escape',\n\tENTER = 'enter',\n\tSPACE = 'space',\n\tTAB = 'tab',\n\tDELETE = 'delete',\n\tBACKSPACE = 'backspace',\n\n\t// Arrow keys\n\tARROW_UP = 'arrowup',\n\tARROW_DOWN = 'arrowdown',\n\tARROW_LEFT = 'arrowleft',\n\tARROW_RIGHT = 'arrowright',\n\n\t// Modifier combinations (use + to combine)\n\tCTRL = 'ctrl',\n\tCMD = 'cmd',\n\tMETA = 'meta',\n\tALT = 'alt',\n\tSHIFT = 'shift',\n}\n\nexport enum MouseEvent {\n\tRIGHT_CLICK = 'right-click',\n\tDOUBLE_CLICK = 'double-click',\n\tMIDDLE_CLICK = 'middle-click',\n\tMOUSE_SCROLL = 'mouse-scroll',\n\t// Mouse + modifier combos\n\tSHIFT_CLICK = 'shift+click',\n\tCTRL_CLICK = 'ctrl+click',\n\tCMD_CLICK = 'cmd+click',\n\tALT_CLICK = 'alt+click',\n}\n\nexport enum SelectionEvent {\n\tTEXT_SELECT = 'text-select',\n}\n\n// Activation modes\nexport enum ActivationMode {\n\t/**\n\t * Toggle mode: Press to activate, press again to deactivate\n\t * Good for persistent UI elements or modes\n\t */\n\tTOGGLE = 'toggle',\n\n\t/**\n\t * Hold mode: Activate on keydown/mousedown, deactivate on keyup/mouseup\n\t * Good for temporary actions like radial menus\n\t */\n\tHOLD = 'hold',\n\n\t/**\n\t * Trigger mode: Fire once with optional cooldown\n\t * Good for single actions that shouldn't be spammed\n\t */\n\tTRIGGER = 'trigger',\n}\n\n// Combo string type for keyboard shortcuts\n// Examples: \"ctrl+s\", \"cmd+shift+p\", \"ctrl+alt+delete\"\n// We use a branded type to provide better IntelliSense while allowing any string\nexport type HotkeyCombo = string & { __brand?: 'HotkeyCombo' };\n\n// Helper type for common hotkey combinations (for better IntelliSense)\nexport type CommonHotkeyCombo =\n\t| 'ctrl+s'\n\t| 'ctrl+c'\n\t| 'ctrl+v'\n\t| 'ctrl+x'\n\t| 'ctrl+z'\n\t| 'ctrl+shift+z'\n\t| 'cmd+s'\n\t| 'cmd+c'\n\t| 'cmd+v'\n\t| 'cmd+x'\n\t| 'cmd+z'\n\t| 'cmd+shift+z'\n\t| 'cmd+shift+p'\n\t| 'ctrl+shift+p'\n\t| 'alt+enter'\n\t| HotkeyCombo; // Allow any other string combo\n\n// Union type for all activation events\nexport type ActivationEvent =\n\t| Hotkey\n\t| MouseEvent\n\t| SelectionEvent\n\t| HotkeyCombo;\n\n// Activation conditions with mode configuration\nexport interface ActivationConditions {\n\t/**\n\t * Array of events that can trigger activation\n\t */\n\tevents: ActivationEvent[];\n\n\t/**\n\t * The activation mode (defaults to TOGGLE if not specified)\n\t */\n\tmode?: ActivationMode;\n\n\t/**\n\t * Cooldown in milliseconds for TRIGGER mode\n\t * Prevents rapid re-triggering\n\t */\n\tcooldown?: number;\n}\n\nexport interface ActivationState {\n\tisActive: boolean;\n\ttriggerData?: {\n\t\ttype: 'hotkey' | 'mouse' | 'selection';\n\t\tevent?: ActivationEvent;\n\t\tmousePosition?: { x: number; y: number };\n\t\tselectedText?: string;\n\t\toriginalEvent?: Event;\n\t};\n}\n","import {\n\tHotkey,\n\tMouseEvent as SpellMouseEvent,\n\tSelectionEvent,\n\tActivationMode,\n\ttype ActivationEvent,\n\ttype ActivationConditions,\n\ttype ActivationState,\n} from '@/store/spellSlice/SpellTypes';\n\ntype ActivationCallback = (state: ActivationState) => void;\ntype DeactivationCallback = () => void;\n\ninterface SpellRegistration {\n\tspellId: string;\n\tconditions: ActivationConditions;\n\tonActivate?: ActivationCallback;\n\tonDeactivate?: DeactivationCallback;\n\tpreventDefaultEvents?: boolean;\n\tignoreInputElements?: boolean;\n\t// Internal state\n\tisActive: boolean;\n\tlastTriggerTime: number;\n\tisOnCooldown: boolean;\n\theldKeys: Set<string>;\n\tactiveHoldEvent: ActivationEvent | null;\n}\n\n/**\n * Centralized manager for spell activations.\n * Maintains a single set of event listeners and routes events to registered spells.\n */\nclass SpellActivationManager {\n\tprivate static instance: SpellActivationManager | null = null;\n\tprivate registrations = new Map<string, SpellRegistration>();\n\tprivate isListening = false;\n\tprivate lastMousePosition = { x: 0, y: 0 };\n\n\t// Bound event handlers (for proper removal)\n\tprivate boundHandlers = {\n\t\tkeydown: this.handleKeyDown.bind(this),\n\t\tkeyup: this.handleKeyUp.bind(this),\n\t\tmousemove: this.handleMouseMove.bind(this),\n\t\tmouseup: this.handleMouseUp.bind(this),\n\t\tclick: this.handleClick.bind(this),\n\t\tcontextmenu: this.handleContextMenu.bind(this),\n\t\tdblclick: this.handleDoubleClick.bind(this),\n\t\tauxclick: this.handleAuxClick.bind(this),\n\t\tselectionchange: this.handleSelectionChange.bind(this),\n\t};\n\n\tprivate selectionTimeout: NodeJS.Timeout | null = null;\n\n\tprivate constructor() {\n\t\t// Private constructor for singleton\n\t}\n\n\tstatic getInstance(): SpellActivationManager {\n\t\tif (!SpellActivationManager.instance) {\n\t\t\tSpellActivationManager.instance = new SpellActivationManager();\n\t\t}\n\t\treturn SpellActivationManager.instance;\n\t}\n\n\t/**\n\t * Destroy the singleton instance (primarily for testing)\n\t * This allows complete reset of the manager between tests\n\t */\n\tstatic destroyInstance(): void {\n\t\tif (SpellActivationManager.instance) {\n\t\t\tSpellActivationManager.instance.reset();\n\t\t\tSpellActivationManager.instance = null;\n\t\t}\n\t}\n\n\t/**\n\t * Register a spell with its activation conditions\n\t */\n\tregister(\n\t\tspellId: string,\n\t\tconditions: ActivationConditions,\n\t\tcallbacks: {\n\t\t\tonActivate?: ActivationCallback;\n\t\t\tonDeactivate?: DeactivationCallback;\n\t\t\tpreventDefaultEvents?: boolean;\n\t\t\tignoreInputElements?: boolean;\n\t\t}\n\t): void {\n\t\tconst registration: SpellRegistration = {\n\t\t\tspellId,\n\t\t\tconditions,\n\t\t\tonActivate: callbacks.onActivate,\n\t\t\tonDeactivate: callbacks.onDeactivate,\n\t\t\tpreventDefaultEvents: callbacks.preventDefaultEvents ?? true,\n\t\t\tignoreInputElements: callbacks.ignoreInputElements ?? true,\n\t\t\tisActive: false,\n\t\t\tlastTriggerTime: 0,\n\t\t\tisOnCooldown: false,\n\t\t\theldKeys: new Set(),\n\t\t\tactiveHoldEvent: null,\n\t\t};\n\n\t\tthis.registrations.set(spellId, registration);\n\t\tthis.startListening();\n\t}\n\n\t/**\n\t * Reset the manager (primarily for testing)\n\t * Clears all registrations and stops listening\n\t */\n\treset(): void {\n\t\t// Deactivate all active spells first\n\t\tfor (const registration of this.registrations.values()) {\n\t\t\tif (registration.isActive) {\n\t\t\t\tthis.deactivateSpell(registration);\n\t\t\t}\n\t\t}\n\n\t\t// Clear all registrations\n\t\tthis.registrations.clear();\n\n\t\t// Stop listening\n\t\tthis.stopListening();\n\n\t\t// Reset the listening flag\n\t\tthis.isListening = false;\n\n\t\t// Reset mouse position\n\t\tthis.lastMousePosition = { x: 0, y: 0 };\n\n\t\t// Clear any pending timeouts\n\t\tif (this.selectionTimeout) {\n\t\t\tclearTimeout(this.selectionTimeout);\n\t\t\tthis.selectionTimeout = null;\n\t\t}\n\t}\n\n\t/**\n\t * Get registrations (primarily for testing)\n\t */\n\tgetRegistrations(): Map<string, SpellRegistration> {\n\t\treturn this.registrations;\n\t}\n\n\t/**\n\t * Unregister a spell\n\t */\n\tunregister(spellId: string): void {\n\t\tconst registration = this.registrations.get(spellId);\n\t\tif (registration && registration.isActive) {\n\t\t\t// Deactivate if active\n\t\t\tthis.deactivateSpell(registration);\n\t\t}\n\t\tthis.registrations.delete(spellId);\n\n\t\t// Stop listening if no more registrations\n\t\tif (this.registrations.size === 0) {\n\t\t\tthis.stopListening();\n\t\t}\n\t}\n\n\t/**\n\t * Get activation state for a spell\n\t */\n\tgetActivationState(spellId: string): ActivationState {\n\t\tconst registration = this.registrations.get(spellId);\n\t\treturn {\n\t\t\tisActive: registration?.isActive ?? false,\n\t\t};\n\t}\n\n\t/**\n\t * Start listening to events (if not already)\n\t */\n\tprivate startListening(): void {\n\t\tif (this.isListening) return;\n\t\tthis.isListening = true;\n\n\t\t// Keyboard events\n\t\twindow.addEventListener('keydown', this.boundHandlers.keydown);\n\t\twindow.addEventListener('keyup', this.boundHandlers.keyup);\n\n\t\t// Mouse events\n\t\twindow.addEventListener('mousemove', this.boundHandlers.mousemove);\n\t\twindow.addEventListener('mouseup', this.boundHandlers.mouseup);\n\t\twindow.addEventListener('click', this.boundHandlers.click);\n\t\twindow.addEventListener('contextmenu', this.boundHandlers.contextmenu);\n\t\twindow.addEventListener('dblclick', this.boundHandlers.dblclick);\n\t\twindow.addEventListener('auxclick', this.boundHandlers.auxclick);\n\n\t\t// Selection events\n\t\tdocument.addEventListener(\n\t\t\t'selectionchange',\n\t\t\tthis.boundHandlers.selectionchange\n\t\t);\n\t}\n\n\t/**\n\t * Stop listening to events\n\t */\n\tprivate stopListening(): void {\n\t\tif (!this.isListening) return;\n\t\tthis.isListening = false;\n\n\t\t// Remove all event listeners\n\t\twindow.removeEventListener('keydown', this.boundHandlers.keydown);\n\t\twindow.removeEventListener('keyup', this.boundHandlers.keyup);\n\t\twindow.removeEventListener('mousemove', this.boundHandlers.mousemove);\n\t\twindow.removeEventListener('mouseup', this.boundHandlers.mouseup);\n\t\twindow.removeEventListener('click', this.boundHandlers.click);\n\t\twindow.removeEventListener('contextmenu', this.boundHandlers.contextmenu);\n\t\twindow.removeEventListener('dblclick', this.boundHandlers.dblclick);\n\t\twindow.removeEventListener('auxclick', this.boundHandlers.auxclick);\n\t\tdocument.removeEventListener(\n\t\t\t'selectionchange',\n\t\t\tthis.boundHandlers.selectionchange\n\t\t);\n\n\t\t// Clear selection timeout\n\t\tif (this.selectionTimeout) {\n\t\t\tclearTimeout(this.selectionTimeout);\n\t\t\tthis.selectionTimeout = null;\n\t\t}\n\t}\n\n\t/**\n\t * Helper to check if event target is an input element\n\t */\n\tprivate isInputElement(\n\t\ttarget: EventTarget | null,\n\t\tignoreInputElements: boolean\n\t): boolean {\n\t\tif (!ignoreInputElements) return false;\n\t\tif (!target || !(target instanceof HTMLElement)) return false;\n\t\treturn target.closest('input, textarea, [contenteditable=\"true\"]') !== null;\n\t}\n\n\t/**\n\t * Parse hotkey combo string\n\t */\n\tprivate parseHotkeyCombo(combo: string): {\n\t\tkey: string;\n\t\tmodifiers: {\n\t\t\tctrl: boolean;\n\t\t\tcmd: boolean;\n\t\t\tmeta: boolean;\n\t\t\talt: boolean;\n\t\t\tshift: boolean;\n\t\t};\n\t} {\n\t\tconst parts = combo.toLowerCase().split('+');\n\t\tconst key = parts[parts.length - 1];\n\t\treturn {\n\t\t\tkey,\n\t\t\tmodifiers: {\n\t\t\t\tctrl: parts.includes('ctrl'),\n\t\t\t\tcmd: parts.includes('cmd'),\n\t\t\t\tmeta: parts.includes('meta') || parts.includes('cmd'),\n\t\t\t\talt: parts.includes('alt'),\n\t\t\t\tshift: parts.includes('shift'),\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Check if keyboard event matches hotkey\n\t */\n\tprivate matchesHotkey(\n\t\tevent: KeyboardEvent,\n\t\thotkey: Hotkey | string\n\t): boolean {\n\t\tif (typeof hotkey === 'string' && hotkey.includes('+')) {\n\t\t\t// It's a combo - must match all modifiers exactly\n\t\t\tconst combo = this.parseHotkeyCombo(hotkey);\n\t\t\tconst keyMatches = event.key.toLowerCase() === combo.key;\n\t\t\tconst modifiersMatch =\n\t\t\t\tevent.ctrlKey === combo.modifiers.ctrl &&\n\t\t\t\tevent.metaKey === combo.modifiers.meta &&\n\t\t\t\tevent.altKey === combo.modifiers.alt &&\n\t\t\t\tevent.shiftKey === combo.modifiers.shift;\n\t\t\treturn keyMatches && modifiersMatch;\n\t\t} else {\n\t\t\t// Single key - should NOT have any modifiers (except shift for capital letters)\n\t\t\t// We allow shift for typing capital letters\n\t\t\tconst hasUnexpectedModifiers =\n\t\t\t\tevent.ctrlKey || event.metaKey || event.altKey;\n\t\t\tif (hasUnexpectedModifiers) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn event.key.toLowerCase() === hotkey.toLowerCase();\n\t\t}\n\t}\n\n\t/**\n\t * Check if a string is a keyboard combo\n\t */\n\tprivate isKeyboardCombo(value: string): boolean {\n\t\treturn value.includes('+') && !value.includes('click');\n\t}\n\n\t/**\n\t * Extract event types from conditions\n\t */\n\tprivate extractEventTypes(events: ActivationEvent[]) {\n\t\tconst hotkeyEvents = events.filter(\n\t\t\t(c): c is Hotkey | string =>\n\t\t\t\tObject.values(Hotkey).includes(c as Hotkey) ||\n\t\t\t\t(typeof c === 'string' && this.isKeyboardCombo(c))\n\t\t);\n\n\t\tconst mouseEvents = events.filter((c): c is SpellMouseEvent =>\n\t\t\tObject.values(SpellMouseEvent).includes(c as SpellMouseEvent)\n\t\t);\n\n\t\tconst selectionEvents = events.filter((c): c is SelectionEvent =>\n\t\t\tObject.values(SelectionEvent).includes(c as SelectionEvent)\n\t\t);\n\n\t\treturn { hotkeyEvents, mouseEvents, selectionEvents };\n\t}\n\n\t/**\n\t * Activate a spell\n\t */\n\tprivate activateSpell(\n\t\tregistration: SpellRegistration,\n\t\ttriggerData: ActivationState['triggerData'],\n\t\tevent?: ActivationEvent\n\t): void {\n\t\tconst mode = registration.conditions.mode || ActivationMode.TOGGLE;\n\t\tconst cooldown = registration.conditions.cooldown || 0;\n\n\t\t// Check cooldown for TRIGGER mode\n\t\tif (mode === ActivationMode.TRIGGER) {\n\t\t\tconst now = Date.now();\n\t\t\tif (\n\t\t\t\tregistration.isOnCooldown ||\n\t\t\t\tnow - registration.lastTriggerTime < cooldown\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tregistration.lastTriggerTime = now;\n\t\t\tif (cooldown > 0) {\n\t\t\t\tregistration.isOnCooldown = true;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tregistration.isOnCooldown = false;\n\t\t\t\t}, cooldown);\n\t\t\t}\n\t\t}\n\n\t\t// For HOLD mode, track the active event\n\t\tif (mode === ActivationMode.HOLD && event) {\n\t\t\tregistration.activeHoldEvent = event;\n\t\t}\n\n\t\tregistration.isActive = true;\n\t\tconst state: ActivationState = {\n\t\t\tisActive: true,\n\t\t\ttriggerData,\n\t\t};\n\n\t\tregistration.onActivate?.(state);\n\n\t\t// For TRIGGER mode, immediately deactivate after a short delay\n\t\tif (mode === ActivationMode.TRIGGER) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.deactivateSpell(registration);\n\t\t\t}, 100); // Brief activation for visual feedback\n\t\t}\n\t}\n\n\t/**\n\t * Deactivate a spell\n\t */\n\tprivate deactivateSpell(registration: SpellRegistration): void {\n\t\tregistration.activeHoldEvent = null;\n\t\tregistration.heldKeys.clear();\n\t\tregistration.isActive = false;\n\t\tregistration.onDeactivate?.();\n\t}\n\n\t// Event Handlers\n\n\tprivate handleMouseMove(event: MouseEvent): void {\n\t\tthis.lastMousePosition = { x: event.clientX, y: event.clientY };\n\t}\n\n\tprivate handleKeyDown(event: KeyboardEvent): void {\n\t\t// Process each registration\n\t\tfor (const registration of this.registrations.values()) {\n\t\t\tif (\n\t\t\t\tthis.isInputElement(\n\t\t\t\t\tevent.target,\n\t\t\t\t\tregistration.ignoreInputElements ?? true\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst { hotkeyEvents } = this.extractEventTypes(\n\t\t\t\tregistration.conditions.events\n\t\t\t);\n\t\t\tconst mode = registration.conditions.mode || ActivationMode.TOGGLE;\n\n\t\t\tfor (const hotkey of hotkeyEvents) {\n\t\t\t\tif (this.matchesHotkey(event, hotkey)) {\n\t\t\t\t\tif (registration.preventDefaultEvents) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t}\n\n\t\t\t\t\tconst keyString =\n\t\t\t\t\t\ttypeof hotkey === 'string' ? hotkey : (hotkey as string);\n\n\t\t\t\t\tif (mode === ActivationMode.TOGGLE) {\n\t\t\t\t\t\tif (registration.isActive) {\n\t\t\t\t\t\t\tthis.deactivateSpell(registration);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.activateSpell(\n\t\t\t\t\t\t\t\tregistration,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'hotkey',\n\t\t\t\t\t\t\t\t\tevent: hotkey as ActivationEvent,\n\t\t\t\t\t\t\t\t\tmousePosition: this.lastMousePosition,\n\t\t\t\t\t\t\t\t\toriginalEvent: event,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\thotkey as ActivationEvent\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (mode === ActivationMode.HOLD) {\n\t\t\t\t\t\t// For HOLD mode, only activate if not already active\n\t\t\t\t\t\t// We track held keys to handle key repeat events properly\n\t\t\t\t\t\tif (!registration.heldKeys.has(keyString)) {\n\t\t\t\t\t\t\tregistration.heldKeys.add(keyString);\n\t\t\t\t\t\t\t// Only activate if not already active\n\t\t\t\t\t\t\tif (!registration.isActive) {\n\t\t\t\t\t\t\t\tthis.activateSpell(\n\t\t\t\t\t\t\t\t\tregistration,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'hotkey',\n\t\t\t\t\t\t\t\t\t\tevent: hotkey as ActivationEvent,\n\t\t\t\t\t\t\t\t\t\tmousePosition: this.lastMousePosition,\n\t\t\t\t\t\t\t\t\t\toriginalEvent: event,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\thotkey as ActivationEvent\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// If key is already held, just ignore the repeat event\n\t\t\t\t\t} else if (mode === ActivationMode.TRIGGER) {\n\t\t\t\t\t\tif (!registration.isActive) {\n\t\t\t\t\t\t\tthis.activateSpell(\n\t\t\t\t\t\t\t\tregistration,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'hotkey',\n\t\t\t\t\t\t\t\t\tevent: hotkey as ActivationEvent,\n\t\t\t\t\t\t\t\t\tmousePosition: this.lastMousePosition,\n\t\t\t\t\t\t\t\t\toriginalEvent: event,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\thotkey as ActivationEvent\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleKeyUp(event: KeyboardEvent): void {\n\t\t// Process HOLD mode registrations\n\t\tfor (const registration of this.registrations.values()) {\n\t\t\tconst mode = registration.conditions.mode || ActivationMode.TOGGLE;\n\t\t\tif (mode !== ActivationMode.HOLD) continue;\n\n\t\t\tconst { hotkeyEvents } = this.extractEventTypes(\n\t\t\t\tregistration.conditions.events\n\t\t\t);\n\n\t\t\tfor (const hotkey of hotkeyEvents) {\n\t\t\t\t// Use the same matching logic as keydown\n\t\t\t\tif (this.matchesHotkey(event, hotkey)) {\n\t\t\t\t\tconst keyString =\n\t\t\t\t\t\ttypeof hotkey === 'string' ? hotkey : (hotkey as string);\n\t\t\t\t\tregistration.heldKeys.delete(keyString);\n\n\t\t\t\t\t// Deactivate if this was the last held key and spell is active\n\t\t\t\t\t// This handles cases where multiple keys could activate the same spell\n\t\t\t\t\tif (registration.heldKeys.size === 0 && registration.isActive) {\n\t\t\t\t\t\tthis.deactivateSpell(registration);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleClick(event: MouseEvent): void {\n\t\t// Handle modifier+click combos\n\t\tfor (const registration of this.registrations.values()) {\n\t\t\tconst { mouseEvents } = this.extractEventTypes(\n\t\t\t\tregistration.conditions.events\n\t\t\t);\n\t\t\tconst mode = registration.conditions.mode || ActivationMode.TOGGLE;\n\n\t\t\tlet matchedEvent: SpellMouseEvent | null = null;\n\n\t\t\tif (event.shiftKey && mouseEvents.includes(SpellMouseEvent.SHIFT_CLICK)) {\n\t\t\t\tmatchedEvent = SpellMouseEvent.SHIFT_CLICK;\n\t\t\t} else if (\n\t\t\t\tevent.ctrlKey &&\n\t\t\t\tmouseEvents.includes(SpellMouseEvent.CTRL_CLICK)\n\t\t\t) {\n\t\t\t\tmatchedEvent = SpellMouseEvent.CTRL_CLICK;\n\t\t\t} else if (\n\t\t\t\tevent.metaKey &&\n\t\t\t\tmouseEvents.includes(SpellMouseEvent.CMD_CLICK)\n\t\t\t) {\n\t\t\t\tmatchedEvent = SpellMouseEvent.CMD_CLICK;\n\t\t\t} else if (\n\t\t\t\tevent.altKey &&\n\t\t\t\tmouseEvents.includes(SpellMouseEvent.ALT_CLICK)\n\t\t\t) {\n\t\t\t\tmatchedEvent = SpellMouseEvent.ALT_CLICK;\n\t\t\t}\n\n\t\t\tif (matchedEvent) {\n\t\t\t\tif (registration.preventDefaultEvents) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t\tif (mode === ActivationMode.TOGGLE) {\n\t\t\t\t\tif (registration.isActive) {\n\t\t\t\t\t\tthis.deactivateSpell(registration);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.activateSpell(\n\t\t\t\t\t\t\tregistration,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'mouse',\n\t\t\t\t\t\t\t\tevent: matchedEvent,\n\t\t\t\t\t\t\t\tmousePosition: { x: event.clientX, y: event.clientY },\n\t\t\t\t\t\t\t\toriginalEvent: event,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmatchedEvent\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.activateSpell(\n\t\t\t\t\t\tregistration,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'mouse',\n\t\t\t\t\t\t\tevent: matchedEvent,\n\t\t\t\t\t\t\tmousePosition: { x: event.clientX, y: event.clientY },\n\t\t\t\t\t\t\toriginalEvent: event,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmatchedEvent\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleContextMenu(event: MouseEvent): void {\n\t\tfor (const registration of this.registrations.values()) {\n\t\t\tconst { mouseEvents } = this.extractEventTypes(\n\t\t\t\tregistration.conditions.events\n\t\t\t);\n\t\t\tconst mode = registration.conditions.mode || ActivationMode.TOGGLE;\n\n\t\t\tif (mouseEvents.includes(SpellMouseEvent.RIGHT_CLICK)) {\n\t\t\t\tif (registration.preventDefaultEvents) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tif (mode === ActivationMode.HOLD) {\n\t\t\t\t\t// For hold mode with right-click, activate immediately\n\t\t\t\t\tthis.activateSpell(\n\t\t\t\t\t\tregistration,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'mouse',\n\t\t\t\t\t\t\tevent: SpellMouseEvent.RIGHT_CLICK,\n\t\t\t\t\t\t\tmousePosition: { x: event.clientX, y: event.clientY },\n\t\t\t\t\t\t\toriginalEvent: event,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSpellMouseEvent.RIGHT_CLICK\n\t\t\t\t\t);\n\n\t\t\t\t\t// Set up mouseup handler for deactivation\n\t\t\t\t\tconst handleMouseUp = () => {\n\t\t\t\t\t\tif (registration.activeHoldEvent === SpellMouseEvent.RIGHT_CLICK) {\n\t\t\t\t\t\t\tthis.deactivateSpell(registration);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twindow.removeEventListener('mouseup', handleMouseUp);\n\t\t\t\t\t};\n\t\t\t\t\twindow.addEventListener('mouseup', handleMouseUp);\n\t\t\t\t} else {\n\t\t\t\t\t// For other modes, handle normally\n\t\t\t\t\tif (mode === ActivationMode.TOGGLE && registration.isActive) {\n\t\t\t\t\t\tthis.deactivateSpell(registration);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.activateSpell(\n\t\t\t\t\t\t\tregistration,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'mouse',\n\t\t\t\t\t\t\t\tevent: SpellMouseEvent.RIGHT_CLICK,\n\t\t\t\t\t\t\t\tmousePosition: { x: event.clientX, y: event.clientY },\n\t\t\t\t\t\t\t\toriginalEvent: event,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tSpellMouseEvent.RIGHT_CLICK\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleDoubleClick(event: MouseEvent): void {\n\t\tfor (const registration of this.registrations.values()) {\n\t\t\tconst { mouseEvents } = this.extractEventTypes(\n\t\t\t\tregistration.conditions.events\n\t\t\t);\n\t\t\tconst mode = registration.conditions.mode || ActivationMode.TOGGLE;\n\n\t\t\tif (mouseEvents.includes(SpellMouseEvent.DOUBLE_CLICK)) {\n\t\t\t\tif (mode === ActivationMode.TOGGLE && registration.isActive) {\n\t\t\t\t\tthis.deactivateSpell(registration);\n\t\t\t\t} else {\n\t\t\t\t\tthis.activateSpell(\n\t\t\t\t\t\tregistration,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'mouse',\n\t\t\t\t\t\t\tevent: SpellMouseEvent.DOUBLE_CLICK,\n\t\t\t\t\t\t\tmousePosition: { x: event.clientX, y: event.clientY },\n\t\t\t\t\t\t\toriginalEvent: event,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSpellMouseEvent.DOUBLE_CLICK\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleAuxClick(event: MouseEvent): void {\n\t\tif (event.button !== 1) return; // Only middle button\n\n\t\tfor (const registration of this.registrations.values()) {\n\t\t\tconst { mouseEvents } = this.extractEventTypes(\n\t\t\t\tregistration.conditions.events\n\t\t\t);\n\t\t\tconst mode = registration.conditions.mode || ActivationMode.TOGGLE;\n\n\t\t\tif (mouseEvents.includes(SpellMouseEvent.MIDDLE_CLICK)) {\n\t\t\t\tif (registration.preventDefaultEvents) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tif (mode === ActivationMode.TOGGLE && registration.isActive) {\n\t\t\t\t\tthis.deactivateSpell(registration);\n\t\t\t\t} else {\n\t\t\t\t\tthis.activateSpell(\n\t\t\t\t\t\tregistration,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'mouse',\n\t\t\t\t\t\t\tevent: SpellMouseEvent.MIDDLE_CLICK,\n\t\t\t\t\t\t\tmousePosition: { x: event.clientX, y: event.clientY },\n\t\t\t\t\t\t\toriginalEvent: event,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSpellMouseEvent.MIDDLE_CLICK\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleMouseUp(): void {\n\t\t// This is handled inline for right-click hold mode\n\t\t// Could be extended for other mouse hold scenarios\n\t}\n\n\tprivate handleSelectionChange(): void {\n\t\t// Clear previous timeout\n\t\tif (this.selectionTimeout) {\n\t\t\tclearTimeout(this.selectionTimeout);\n\t\t}\n\n\t\t// Debounce selection events\n\t\tthis.selectionTimeout = setTimeout(() => {\n\t\t\tconst selection = window.getSelection();\n\t\t\tconst selectedText = selection?.toString().trim();\n\n\t\t\tfor (const registration of this.registrations.values()) {\n\t\t\t\tconst { selectionEvents } = this.extractEventTypes(\n\t\t\t\t\tregistration.conditions.events\n\t\t\t\t);\n\n\t\t\t\tif (selectionEvents.includes(SelectionEvent.TEXT_SELECT)) {\n\t\t\t\t\tif (selectedText && selectedText.length > 0) {\n\t\t\t\t\t\tthis.activateSpell(\n\t\t\t\t\t\t\tregistration,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'selection',\n\t\t\t\t\t\t\t\tevent: SelectionEvent.TEXT_SELECT,\n\t\t\t\t\t\t\t\tselectedText,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tSelectionEvent.TEXT_SELECT\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (registration.isActive) {\n\t\t\t\t\t\t// Deactivate if no text selected\n\t\t\t\t\t\tthis.deactivateSpell(registration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, 200);\n\t}\n}\n\nexport default SpellActivationManager;\n"],"mappings":"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","names":["Hotkey","MouseEvent","SelectionEvent"]}