import { ActivationConditions, ActivationState } from './SpellTypes.js';

interface UseSpellOptions {
    /** Unique identifier for the spell */
    id: string;
    /** Activation conditions (keyboard, mouse, selection events) */
    activationConditions: ActivationConditions;
    /** Callback when spell is activated */
    onActivate?: (state: ActivationState) => void;
    /** Callback when spell is deactivated */
    onDeactivate?: () => void;
    /** Whether to prevent default browser behavior for activation events */
    preventDefaultEvents?: boolean;
    /** Whether to ignore activation when focus is in input elements */
    ignoreInputElements?: boolean;
}
interface UseSpellReturn {
    /** Whether the spell is currently active */
    isActive: boolean;
    /** Programmatically activate the spell */
    activate: () => void;
    /** Programmatically deactivate the spell */
    deactivate: () => void;
    /** Toggle the spell's active state */
    toggle: () => void;
}
/**
 * Hook for registering and managing a spell with activation conditions.
 * This is the primary way to use spells in components.
 *
 * @example
 * ```tsx
 * const { isActive } = useSpell({
 *   id: 'my-spell',
 *   activationConditions: {
 *     events: [Hotkey.SPACE, MouseEvent.RIGHT_CLICK],
 *     mode: ActivationMode.HOLD
 *   },
 *   onActivate: (state) => {
 *     console.log('Spell activated!', state.triggerData);
 *   },
 *   onDeactivate: () => {
 *     console.log('Spell deactivated!');
 *   }
 * });
 * ```
 */
declare function useSpell(options: UseSpellOptions): UseSpellReturn;

export { type UseSpellOptions, type UseSpellReturn, useSpell };
