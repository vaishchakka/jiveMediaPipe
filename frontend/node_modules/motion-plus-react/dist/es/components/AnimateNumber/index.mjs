"use client";
import { jsx, jsxs } from 'react/jsx-runtime';
import { MotionConfigContext, LayoutGroup, MotionConfig, motion, easeOut } from 'motion/react';
import { forwardRef, useMemo, useContext } from 'react';
import { maskHeight, Mask } from './Mask.mjs';
import { NumberSection } from './NumberSection.mjs';
import { formatToParts } from './utils/format-parts.mjs';

const DEFAULT_TRANSITION = {
    // We use keyframes and times so the opacity/exit animations can last
    // as long as the layout animation, so Framer Motion doesn't have to
    // remove exiting elements until the layout animation is done.
    // This worked better in testing than safeToRemove() from usePresence()
    opacity: { duration: 1, ease: easeOut }, // perceptual duration of 0.5s
    layout: { type: "spring", duration: 1, bounce: 0 },
    y: { type: "spring", duration: 1, bounce: 0 },
};
const AnimateNumber = forwardRef(function AnimateNumber({ children: value, locales, format, transition, style, suffix, prefix, ...rest }, ref) {
    // Split the number into parts
    const parts = useMemo(() => formatToParts(value, { locales, format }, prefix, suffix), [value, locales, format]);
    const { pre, integer, fraction, post, formatted } = parts;
    const contextTransition = useContext(MotionConfigContext).transition;
    transition = transition ?? contextTransition ?? DEFAULT_TRANSITION;
    const { layoutDependency } = rest;
    const dependency = useMemo(() => {
        if (layoutDependency === undefined)
            return undefined;
        return { layoutDependency, value };
    }, [layoutDependency, value]);
    return (jsx(LayoutGroup, { children: jsx(MotionConfig, { transition: transition, children: jsx(motion.div, { ...rest, ref: ref, layout // For convenience, b/c it's basically implied
                : true, layoutDependency: dependency, style: {
                    lineHeight: 1, // make this one easy to override
                    ...style,
                    display: "inline-flex",
                    isolation: "isolate", // so number can be underneath first/last
                    whiteSpace: "nowrap",
                }, children: jsxs(motion.div, { layout: true, layoutDependency: dependency, "aria-label": formatted, style: {
                        display: "inline-flex",
                        direction: "ltr", // I think this is needed b/c numbers are always LTR?
                        isolation: "isolate", // so number can be underneath pre/post
                        position: "relative",
                        zIndex: -1, // so the whole number is under any first/last
                        // userSelect: "none", // I think adding this to the parent then undoing it on the selectable one might work a little better
                        // pointerEvents: "none",
                    }, children: [jsx(NumberSection, { style: { padding: `calc(${maskHeight}/2) 0` }, layoutDependency: dependency, "aria-hidden": true, justify: "right", mode: "popLayout", parts: pre, name: "pre" }), jsxs(Mask, { layoutDependency: dependency, children: [jsx(NumberSection, { layoutDependency: dependency, justify: "right", parts: integer, name: "integer" }), jsx(NumberSection, { layout: "position", layoutDependency: dependency, parts: fraction, name: "fraction" })] }), jsx(NumberSection, { style: { padding: `calc(${maskHeight}/2) 0` }, "aria-hidden": true, layout: "position", layoutDependency: dependency, mode: "popLayout", parts: post, name: "post" })] }) }) }) }));
});

export { AnimateNumber, DEFAULT_TRANSITION };
