import React, { useEffect, useRef, useState } from 'react';
import { 
  useDiffState,
  useDiffStateHelpers,
  useDiffStateOperations,
  useCedarState
} from 'cedar-os';
import { diffActions, poseActions } from '../store/cedarStore';
import './PoseDiffVisualizer.css';

const PoseDiffVisualizer = ({ currentPose, referencePose, width = 640, height = 480 }) => {
  const canvasRef = useRef(null);
  const [diffState, diffDispatch] = useCedarState('diffState');
  const [poseState] = useCedarState('poseState');
  
  // CedarOS diff state hooks
  const diffHelpers = useDiffStateHelpers();
  const diffOperations = useDiffStateOperations();
  
  const [visualizationMode, setVisualizationMode] = useState('overlay');
  const [showHeatmap, setShowHeatmap] = useState(true);
  const [jointHighlights, setJointHighlights] = useState([]);
  
  // Update diff state when poses change
  useEffect(() => {
    if (currentPose && referencePose) {
      updatePoseDifferences();
    }
  }, [currentPose, referencePose]);
  
  // Redraw when diff state or visualization settings change
  useEffect(() => {
    drawPoseComparison();
  }, [diffState, visualizationMode, showHeatmap, jointHighlights]);
  
  const updatePoseDifferences = () => {
    const differences = calculatePoseDifferences(currentPose, referencePose);
    const jointScores = calculateJointAccuracyScores(currentPose, referencePose);
    const highlightedJoints = identifyProblematicJoints(jointScores);
    
    // Update CedarOS diff state
    diffDispatch(diffActions.updatePoseDifferences(differences));
    diffDispatch(diffActions.updateJointScores(jointScores));
    diffDispatch(diffActions.highlightJoints(highlightedJoints));
    
    setJointHighlights(highlightedJoints);
  };
  
  const calculatePoseDifferences = (current, reference) => {
    if (!current?.kp || !reference?.kp) return [];
    
    const differences = [];
    const minLength = Math.min(current.kp.length, reference.kp.length);
    
    for (let i = 0; i < minLength; i++) {
      const currentPoint = current.kp[i];
      const refPoint = reference.kp[i];
      
      if (currentPoint[3] > 0.5 && refPoint[3] > 0.5) {
        const distance = Math.sqrt(
          Math.pow(currentPoint[0] - refPoint[0], 2) +
          Math.pow(currentPoint[1] - refPoint[1], 2)
        );
        
        const angleDifference = calculateAngleDifference(currentPoint, refPoint);
        
        differences.push({
          jointIndex: i,
          jointName: getJointName(i),
          distance,
          angleDifference,
          severity: distance > 0.1 ? 'high' : distance > 0.05 ? 'medium' : 'low',
          currentPosition: [currentPoint[0], currentPoint[1]],
          referencePosition: [refPoint[0], refPoint[1]],
          visibility: Math.min(currentPoint[3], refPoint[3])
        });\n      }\n    }\n    \n    return differences;\n  };\n  \n  const calculateJointAccuracyScores = (current, reference) => {\n    const scores = {};\n    const criticalJoints = {\n      'leftShoulder': 11, 'rightShoulder': 12,\n      'leftElbow': 13, 'rightElbow': 14,\n      'leftWrist': 15, 'rightWrist': 16,\n      'leftHip': 23, 'rightHip': 24,\n      'leftKnee': 25, 'rightKnee': 26,\n      'leftAnkle': 27, 'rightAnkle': 28\n    };\n    \n    Object.entries(criticalJoints).forEach(([jointName, index]) => {\n      if (current?.kp?.[index] && reference?.kp?.[index]) {\n        const currentPoint = current.kp[index];\n        const refPoint = reference.kp[index];\n        \n        const distance = Math.sqrt(\n          Math.pow(currentPoint[0] - refPoint[0], 2) +\n          Math.pow(currentPoint[1] - refPoint[1], 2)\n        );\n        \n        const accuracy = Math.max(0, 100 - (distance * 1000));\n        scores[jointName] = {\n          accuracy: Math.round(accuracy),\n          distance,\n          status: accuracy > 80 ? 'excellent' : accuracy > 60 ? 'good' : 'needsWork'\n        };\n      }\n    });\n    \n    return scores;\n  };\n  \n  const identifyProblematicJoints = (jointScores) => {\n    return Object.entries(jointScores)\n      .filter(([_, score]) => score.accuracy < 70)\n      .map(([jointName, score]) => ({\n        jointName,\n        accuracy: score.accuracy,\n        priority: score.accuracy < 50 ? 'high' : 'medium'\n      }));\n  };\n  \n  const calculateAngleDifference = (point1, point2) => {\n    const angle1 = Math.atan2(point1[1], point1[0]);\n    const angle2 = Math.atan2(point2[1], point2[0]);\n    return Math.abs(angle1 - angle2);\n  };\n  \n  const getJointName = (index) => {\n    const jointNames = {\n      0: 'nose', 1: 'leftEyeInner', 2: 'leftEye', 3: 'leftEyeOuter',\n      4: 'rightEyeInner', 5: 'rightEye', 6: 'rightEyeOuter',\n      7: 'leftEar', 8: 'rightEar', 9: 'leftMouth', 10: 'rightMouth',\n      11: 'leftShoulder', 12: 'rightShoulder', 13: 'leftElbow', 14: 'rightElbow',\n      15: 'leftWrist', 16: 'rightWrist', 17: 'leftPinky', 18: 'rightPinky',\n      19: 'leftIndex', 20: 'rightIndex', 21: 'leftThumb', 22: 'rightThumb',\n      23: 'leftHip', 24: 'rightHip', 25: 'leftKnee', 26: 'rightKnee',\n      27: 'leftAnkle', 28: 'rightAnkle', 29: 'leftHeel', 30: 'rightHeel',\n      31: 'leftFootIndex', 32: 'rightFootIndex'\n    };\n    return jointNames[index] || `joint_${index}`;\n  };\n  \n  const drawPoseComparison = () => {\n    const canvas = canvasRef.current;\n    if (!canvas || !currentPose?.kp || !referencePose?.kp) return;\n    \n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, width, height);\n    \n    switch (visualizationMode) {\n      case 'overlay':\n        drawOverlayComparison(ctx);\n        break;\n      case 'sideBySide':\n        drawSideBySideComparison(ctx);\n        break;\n      case 'diff':\n        drawDifferenceVisualization(ctx);\n        break;\n      default:\n        drawOverlayComparison(ctx);\n    }\n    \n    if (showHeatmap) {\n      drawDifferenceHeatmap(ctx);\n    }\n    \n    drawJointHighlights(ctx);\n    drawDifferenceAnnotations(ctx);\n  };\n  \n  const drawOverlayComparison = (ctx) => {\n    // Draw reference pose in green\n    ctx.strokeStyle = 'rgba(34, 197, 94, 0.8)';\n    ctx.fillStyle = 'rgba(34, 197, 94, 0.6)';\n    drawPoseSkeleton(ctx, referencePose.kp, false);\n    \n    // Draw current pose in blue\n    ctx.strokeStyle = 'rgba(59, 130, 246, 0.8)';\n    ctx.fillStyle = 'rgba(59, 130, 246, 0.6)';\n    drawPoseSkeleton(ctx, currentPose.kp, true);\n  };\n  \n  const drawSideBySideComparison = (ctx) => {\n    const halfWidth = width / 2;\n    \n    // Save context and draw reference pose on left\n    ctx.save();\n    ctx.rect(0, 0, halfWidth, height);\n    ctx.clip();\n    ctx.strokeStyle = 'rgba(34, 197, 94, 0.8)';\n    ctx.fillStyle = 'rgba(34, 197, 94, 0.6)';\n    drawPoseSkeleton(ctx, referencePose.kp, false, 0.5, 0);\n    ctx.restore();\n    \n    // Draw current pose on right\n    ctx.save();\n    ctx.rect(halfWidth, 0, halfWidth, height);\n    ctx.clip();\n    ctx.strokeStyle = 'rgba(59, 130, 246, 0.8)';\n    ctx.fillStyle = 'rgba(59, 130, 246, 0.6)';\n    drawPoseSkeleton(ctx, currentPose.kp, true, 0.5, halfWidth);\n    ctx.restore();\n    \n    // Draw divider line\n    ctx.strokeStyle = 'rgba(156, 163, 175, 0.5)';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(halfWidth, 0);\n    ctx.lineTo(halfWidth, height);\n    ctx.stroke();\n  };\n  \n  const drawDifferenceVisualization = (ctx) => {\n    // Draw only the differences as connecting lines\n    diffState.poseDifferences.forEach(diff => {\n      const severity = diff.severity;\n      let color;\n      \n      switch (severity) {\n        case 'high': color = 'rgba(239, 68, 68, 0.8)'; break;\n        case 'medium': color = 'rgba(245, 158, 11, 0.8)'; break;\n        default: color = 'rgba(34, 197, 94, 0.8)'; break;\n      }\n      \n      ctx.strokeStyle = color;\n      ctx.lineWidth = Math.max(1, diff.distance * 100);\n      \n      const currentX = diff.currentPosition[0] * width;\n      const currentY = diff.currentPosition[1] * height;\n      const refX = diff.referencePosition[0] * width;\n      const refY = diff.referencePosition[1] * height;\n      \n      // Draw connection line\n      ctx.beginPath();\n      ctx.moveTo(refX, refY);\n      ctx.lineTo(currentX, currentY);\n      ctx.stroke();\n      \n      // Draw points\n      ctx.fillStyle = 'rgba(34, 197, 94, 0.8)';\n      ctx.beginPath();\n      ctx.arc(refX, refY, 4, 0, 2 * Math.PI);\n      ctx.fill();\n      \n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.arc(currentX, currentY, 4, 0, 2 * Math.PI);\n      ctx.fill();\n    });\n  };\n  \n  const drawDifferenceHeatmap = (ctx) => {\n    if (!diffState.poseDifferences.length) return;\n    \n    // Create heatmap overlay\n    const imageData = ctx.createImageData(width, height);\n    const data = imageData.data;\n    \n    diffState.poseDifferences.forEach(diff => {\n      const x = Math.round(diff.currentPosition[0] * width);\n      const y = Math.round(diff.currentPosition[1] * height);\n      const intensity = Math.min(255, diff.distance * 2550);\n      \n      // Draw a small circle of heat around each difference\n      const radius = 15;\n      for (let dy = -radius; dy <= radius; dy++) {\n        for (let dx = -radius; dx <= radius; dx++) {\n          const pixelX = x + dx;\n          const pixelY = y + dy;\n          \n          if (pixelX >= 0 && pixelX < width && pixelY >= 0 && pixelY < height) {\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            if (distance <= radius) {\n              const fadeIntensity = intensity * (1 - distance / radius);\n              const index = (pixelY * width + pixelX) * 4;\n              \n              data[index] = Math.min(255, data[index] + fadeIntensity); // Red\n              data[index + 1] = Math.max(0, data[index + 1] - fadeIntensity / 2); // Green\n              data[index + 2] = Math.max(0, data[index + 2] - fadeIntensity / 2); // Blue\n              data[index + 3] = Math.min(100, data[index + 3] + fadeIntensity / 3); // Alpha\n            }\n          }\n        }\n      }\n    });\n    \n    ctx.putImageData(imageData, 0, 0);\n  };\n  \n  const drawJointHighlights = (ctx) => {\n    jointHighlights.forEach(highlight => {\n      const jointIndex = getJointIndexByName(highlight.jointName);\n      if (jointIndex !== -1 && currentPose.kp[jointIndex]) {\n        const point = currentPose.kp[jointIndex];\n        const x = point[0] * width;\n        const y = point[1] * height;\n        \n        const color = highlight.priority === 'high' ? \n          'rgba(239, 68, 68, 0.6)' : 'rgba(245, 158, 11, 0.6)';\n        \n        // Draw pulsing circle\n        ctx.fillStyle = color;\n        ctx.strokeStyle = highlight.priority === 'high' ? \n          'rgba(239, 68, 68, 1)' : 'rgba(245, 158, 11, 1)';\n        ctx.lineWidth = 3;\n        \n        const pulseRadius = 12 + Math.sin(Date.now() / 300) * 4;\n        ctx.beginPath();\n        ctx.arc(x, y, pulseRadius, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.stroke();\n      }\n    });\n  };\n  \n  const drawDifferenceAnnotations = (ctx) => {\n    diffState.poseDifferences\n      .filter(diff => diff.severity === 'high')\n      .slice(0, 5) // Show only top 5 most problematic\n      .forEach((diff, index) => {\n        const x = diff.currentPosition[0] * width;\n        const y = diff.currentPosition[1] * height;\n        \n        // Draw annotation box\n        const text = `${diff.jointName}: ${Math.round(diff.distance * 100)}px off`;\n        const metrics = ctx.measureText(text);\n        const boxWidth = metrics.width + 12;\n        const boxHeight = 20;\n        \n        const boxX = x + 15;\n        const boxY = y - boxHeight / 2 + (index * 25);\n        \n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(boxX, boxY, boxWidth, boxHeight);\n        \n        ctx.fillStyle = 'white';\n        ctx.font = '12px Arial';\n        ctx.fillText(text, boxX + 6, boxY + 14);\n        \n        // Draw line to joint\n        ctx.strokeStyle = 'rgba(239, 68, 68, 0.8)';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(boxX, boxY + boxHeight / 2);\n        ctx.stroke();\n      });\n  };\n  \n  const drawPoseSkeleton = (ctx, landmarks, isCurrent = false, scaleX = 1, offsetX = 0) => {\n    const connections = [\n      [11, 12], [11, 13], [13, 15], [12, 14], [14, 16], // Arms\n      [11, 23], [12, 24], [23, 24], // Torso\n      [23, 25], [25, 27], [24, 26], [26, 28], // Legs\n      [0, 1], [1, 2], [2, 3], [0, 4], [4, 5], [5, 6] // Face\n    ];\n    \n    ctx.lineWidth = isCurrent ? 3 : 2;\n    \n    // Draw connections\n    connections.forEach(([startIdx, endIdx]) => {\n      const start = landmarks[startIdx];\n      const end = landmarks[endIdx];\n      \n      if (start && end && start[3] > 0.5 && end[3] > 0.5) {\n        ctx.beginPath();\n        ctx.moveTo(\n          start[0] * width * scaleX + offsetX, \n          start[1] * height\n        );\n        ctx.lineTo(\n          end[0] * width * scaleX + offsetX, \n          end[1] * height\n        );\n        ctx.stroke();\n      }\n    });\n    \n    // Draw landmarks\n    landmarks.forEach((landmark, index) => {\n      if (landmark[3] > 0.5) {\n        const x = landmark[0] * width * scaleX + offsetX;\n        const y = landmark[1] * height;\n        \n        ctx.beginPath();\n        ctx.arc(x, y, isCurrent ? 4 : 3, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n    });\n  };\n  \n  const getJointIndexByName = (jointName) => {\n    const jointIndices = {\n      'leftShoulder': 11, 'rightShoulder': 12,\n      'leftElbow': 13, 'rightElbow': 14,\n      'leftWrist': 15, 'rightWrist': 16,\n      'leftHip': 23, 'rightHip': 24,\n      'leftKnee': 25, 'rightKnee': 26,\n      'leftAnkle': 27, 'rightAnkle': 28\n    };\n    return jointIndices[jointName] || -1;\n  };\n  \n  const handleModeChange = (mode) => {\n    setVisualizationMode(mode);\n    diffDispatch(diffActions.setComparisonMode(mode));\n  };\n  \n  const toggleHeatmap = () => {\n    setShowHeatmap(!showHeatmap);\n    diffDispatch(diffActions.toggleHeatmap());\n  };\n  \n  return (\n    <div className=\"pose-diff-visualizer\">\n      <div className=\"visualizer-controls\">\n        <div className=\"mode-selector\">\n          <button \n            className={`mode-btn ${visualizationMode === 'overlay' ? 'active' : ''}`}\n            onClick={() => handleModeChange('overlay')}\n          >\n            🔄 Overlay\n          </button>\n          <button \n            className={`mode-btn ${visualizationMode === 'sideBySide' ? 'active' : ''}`}\n            onClick={() => handleModeChange('sideBySide')}\n          >\n            ↔️ Side by Side\n          </button>\n          <button \n            className={`mode-btn ${visualizationMode === 'diff' ? 'active' : ''}`}\n            onClick={() => handleModeChange('diff')}\n          >\n            📊 Differences\n          </button>\n        </div>\n        \n        <div className=\"visualization-options\">\n          <label className=\"option-label\">\n            <input \n              type=\"checkbox\" \n              checked={showHeatmap}\n              onChange={toggleHeatmap}\n            />\n            🔥 Show Heatmap\n          </label>\n        </div>\n      </div>\n      \n      <div className=\"canvas-container\">\n        <canvas \n          ref={canvasRef}\n          width={width}\n          height={height}\n          className=\"comparison-canvas\"\n        />\n      </div>\n      \n      <div className=\"legend\">\n        <div className=\"legend-item\">\n          <div className=\"legend-color reference\"></div>\n          <span>Reference Pose</span>\n        </div>\n        <div className=\"legend-item\">\n          <div className=\"legend-color current\"></div>\n          <span>Your Pose</span>\n        </div>\n        <div className=\"legend-item\">\n          <div className=\"legend-color error\"></div>\n          <span>Needs Adjustment</span>\n        </div>\n      </div>\n      \n      {diffState.poseDifferences.length > 0 && (\n        <div className=\"difference-summary\">\n          <h4>📊 Pose Analysis Summary</h4>\n          <div className=\"summary-stats\">\n            <div className=\"stat\">\n              <span className=\"stat-value\">\n                {diffState.poseDifferences.filter(d => d.severity === 'high').length}\n              </span>\n              <span className=\"stat-label\">Major Issues</span>\n            </div>\n            <div className=\"stat\">\n              <span className=\"stat-value\">\n                {diffState.poseDifferences.filter(d => d.severity === 'medium').length}\n              </span>\n              <span className=\"stat-label\">Minor Issues</span>\n            </div>\n            <div className=\"stat\">\n              <span className=\"stat-value\">\n                {Math.round(\n                  (diffState.poseDifferences.filter(d => d.severity === 'low').length / \n                   diffState.poseDifferences.length) * 100\n                )}%\n              </span>\n              <span className=\"stat-label\">Accuracy</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PoseDiffVisualizer;